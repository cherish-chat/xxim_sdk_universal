// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `world.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.WorldPostSubmitReq)
pub struct WorldPostSubmitReq {
    // message fields
    // @@protoc_insertion_point(field:pb.WorldPostSubmitReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.WorldPostSubmitReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldPostSubmitReq {
    fn default() -> &'a WorldPostSubmitReq {
        <WorldPostSubmitReq as ::protobuf::Message>::default_instance()
    }
}

impl WorldPostSubmitReq {
    pub fn new() -> WorldPostSubmitReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &WorldPostSubmitReq| { &m.header },
            |m: &mut WorldPostSubmitReq| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldPostSubmitReq>(
            "WorldPostSubmitReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldPostSubmitReq {
    const NAME: &'static str = "WorldPostSubmitReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldPostSubmitReq {
        WorldPostSubmitReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldPostSubmitReq {
        static instance: WorldPostSubmitReq = WorldPostSubmitReq {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldPostSubmitReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldPostSubmitReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldPostSubmitReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldPostSubmitReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.WorldPostSubmitResp)
pub struct WorldPostSubmitResp {
    // message fields
    // @@protoc_insertion_point(field:pb.WorldPostSubmitResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.WorldPostSubmitResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WorldPostSubmitResp {
    fn default() -> &'a WorldPostSubmitResp {
        <WorldPostSubmitResp as ::protobuf::Message>::default_instance()
    }
}

impl WorldPostSubmitResp {
    pub fn new() -> WorldPostSubmitResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &WorldPostSubmitResp| { &m.header },
            |m: &mut WorldPostSubmitResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WorldPostSubmitResp>(
            "WorldPostSubmitResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WorldPostSubmitResp {
    const NAME: &'static str = "WorldPostSubmitResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WorldPostSubmitResp {
        WorldPostSubmitResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WorldPostSubmitResp {
        static instance: WorldPostSubmitResp = WorldPostSubmitResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WorldPostSubmitResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WorldPostSubmitResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WorldPostSubmitResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorldPostSubmitResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bworld.proto\x12\x02pb\x1a\x0ccommon.proto\"?\n\x12WorldPostSubmitR\
    eq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.RequestHeaderR\x06heade\
    r\"A\n\x13WorldPostSubmitResp\x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12\
    .pb.ResponseHeaderR\x06header2R\n\x0cworldService\x12B\n\x0fWorldPostSub\
    mit\x12\x16.pb.WorldPostSubmitReq\x1a\x17.pb.WorldPostSubmitRespB\x06Z\
    \x04./pbJ\xd1\x02\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x0b\n\x08\n\x01\x08\x12\x03\x02\0\x1b\
    \n\t\n\x02\x08\x0b\x12\x03\x02\0\x1b\n\t\n\x02\x03\0\x12\x03\x03\0\x16\n\
    \n\n\x02\x04\0\x12\x04\x05\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\
    \x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x02\x1b\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x06\x02\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x10\x16\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x19\x1a\n\n\n\x02\x04\x01\x12\
    \x04\t\0\x0b\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x1b\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\n\x02\x1c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\n\x02\
    \x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x11\x17\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\n\x1a\x1b\n\n\n\x02\x06\0\x12\x04\r\0\x10\x01\n\n\n\
    \x03\x06\0\x01\x12\x03\r\x08\x14\n3\n\x04\x06\0\x02\0\x12\x03\x0f\x02H\
    \x1a&WorldPostSubmit\x20\xe4\xb8\x96\xe7\x95\x8c\xe5\x9c\x88\xe5\xb8\x96\
    \xe5\xad\x90\xe5\x8f\x91\xe5\xb8\x83\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x0f\x06\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0f\x16(\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x0f3Fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(WorldPostSubmitReq::generated_message_descriptor_data());
            messages.push(WorldPostSubmitResp::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
