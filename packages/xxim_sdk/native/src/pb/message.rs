// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// MessageSendReq 发送消息请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageSendReq)
pub struct MessageSendReq {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageSendReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    /// 消息
    // @@protoc_insertion_point(field:pb.MessageSendReq.message)
    pub message: ::protobuf::MessageField<super::common::Message>,
    /// 禁止走队列
    // @@protoc_insertion_point(field:pb.MessageSendReq.disableQueue)
    pub disableQueue: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageSendReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageSendReq {
    fn default() -> &'a MessageSendReq {
        <MessageSendReq as ::protobuf::Message>::default_instance()
    }
}

impl MessageSendReq {
    pub fn new() -> MessageSendReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &MessageSendReq| { &m.header },
            |m: &mut MessageSendReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Message>(
            "message",
            |m: &MessageSendReq| { &m.message },
            |m: &mut MessageSendReq| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "disableQueue",
            |m: &MessageSendReq| { &m.disableQueue },
            |m: &mut MessageSendReq| { &mut m.disableQueue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageSendReq>(
            "MessageSendReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageSendReq {
    const NAME: &'static str = "MessageSendReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                24 => {
                    self.disableQueue = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.disableQueue != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.disableQueue != false {
            os.write_bool(3, self.disableQueue)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageSendReq {
        MessageSendReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.message.clear();
        self.disableQueue = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageSendReq {
        static instance: MessageSendReq = MessageSendReq {
            header: ::protobuf::MessageField::none(),
            message: ::protobuf::MessageField::none(),
            disableQueue: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageSendReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageSendReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageSendReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageSendReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageSendResp 发送消息响应
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageSendResp)
pub struct MessageSendResp {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageSendResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageSendResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageSendResp {
    fn default() -> &'a MessageSendResp {
        <MessageSendResp as ::protobuf::Message>::default_instance()
    }
}

impl MessageSendResp {
    pub fn new() -> MessageSendResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &MessageSendResp| { &m.header },
            |m: &mut MessageSendResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageSendResp>(
            "MessageSendResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageSendResp {
    const NAME: &'static str = "MessageSendResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageSendResp {
        MessageSendResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageSendResp {
        static instance: MessageSendResp = MessageSendResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageSendResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageSendResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageSendResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageSendResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageBatchSendReq 批量发送消息请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageBatchSendReq)
pub struct MessageBatchSendReq {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageBatchSendReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    /// 消息
    // @@protoc_insertion_point(field:pb.MessageBatchSendReq.messages)
    pub messages: ::std::vec::Vec<super::common::Message>,
    /// 禁止走队列
    // @@protoc_insertion_point(field:pb.MessageBatchSendReq.disableQueue)
    pub disableQueue: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageBatchSendReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageBatchSendReq {
    fn default() -> &'a MessageBatchSendReq {
        <MessageBatchSendReq as ::protobuf::Message>::default_instance()
    }
}

impl MessageBatchSendReq {
    pub fn new() -> MessageBatchSendReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &MessageBatchSendReq| { &m.header },
            |m: &mut MessageBatchSendReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &MessageBatchSendReq| { &m.messages },
            |m: &mut MessageBatchSendReq| { &mut m.messages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "disableQueue",
            |m: &MessageBatchSendReq| { &m.disableQueue },
            |m: &mut MessageBatchSendReq| { &mut m.disableQueue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageBatchSendReq>(
            "MessageBatchSendReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageBatchSendReq {
    const NAME: &'static str = "MessageBatchSendReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.messages.push(is.read_message()?);
                },
                24 => {
                    self.disableQueue = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.disableQueue != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.disableQueue != false {
            os.write_bool(3, self.disableQueue)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageBatchSendReq {
        MessageBatchSendReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.messages.clear();
        self.disableQueue = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageBatchSendReq {
        static instance: MessageBatchSendReq = MessageBatchSendReq {
            header: ::protobuf::MessageField::none(),
            messages: ::std::vec::Vec::new(),
            disableQueue: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageBatchSendReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageBatchSendReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageBatchSendReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageBatchSendReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageBatchSendResp 批量发送消息响应
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageBatchSendResp)
pub struct MessageBatchSendResp {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageBatchSendResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageBatchSendResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageBatchSendResp {
    fn default() -> &'a MessageBatchSendResp {
        <MessageBatchSendResp as ::protobuf::Message>::default_instance()
    }
}

impl MessageBatchSendResp {
    pub fn new() -> MessageBatchSendResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &MessageBatchSendResp| { &m.header },
            |m: &mut MessageBatchSendResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageBatchSendResp>(
            "MessageBatchSendResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageBatchSendResp {
    const NAME: &'static str = "MessageBatchSendResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageBatchSendResp {
        MessageBatchSendResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageBatchSendResp {
        static instance: MessageBatchSendResp = MessageBatchSendResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageBatchSendResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageBatchSendResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageBatchSendResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageBatchSendResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageInsertReq 插入消息请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageInsertReq)
pub struct MessageInsertReq {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageInsertReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    /// 消息
    // @@protoc_insertion_point(field:pb.MessageInsertReq.messages)
    pub messages: ::std::vec::Vec<super::common::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageInsertReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageInsertReq {
    fn default() -> &'a MessageInsertReq {
        <MessageInsertReq as ::protobuf::Message>::default_instance()
    }
}

impl MessageInsertReq {
    pub fn new() -> MessageInsertReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &MessageInsertReq| { &m.header },
            |m: &mut MessageInsertReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &MessageInsertReq| { &m.messages },
            |m: &mut MessageInsertReq| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageInsertReq>(
            "MessageInsertReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageInsertReq {
    const NAME: &'static str = "MessageInsertReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageInsertReq {
        MessageInsertReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageInsertReq {
        static instance: MessageInsertReq = MessageInsertReq {
            header: ::protobuf::MessageField::none(),
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageInsertReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageInsertReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageInsertReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageInsertReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageInsertResp 插入消息响应
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageInsertResp)
pub struct MessageInsertResp {
    // message fields
    // @@protoc_insertion_point(field:pb.MessageInsertResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageInsertResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageInsertResp {
    fn default() -> &'a MessageInsertResp {
        <MessageInsertResp as ::protobuf::Message>::default_instance()
    }
}

impl MessageInsertResp {
    pub fn new() -> MessageInsertResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &MessageInsertResp| { &m.header },
            |m: &mut MessageInsertResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageInsertResp>(
            "MessageInsertResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageInsertResp {
    const NAME: &'static str = "MessageInsertResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageInsertResp {
        MessageInsertResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageInsertResp {
        static instance: MessageInsertResp = MessageInsertResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageInsertResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageInsertResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageInsertResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageInsertResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessagePushReq 推送消息请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessagePushReq)
pub struct MessagePushReq {
    // message fields
    // @@protoc_insertion_point(field:pb.MessagePushReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    /// 消息
    // @@protoc_insertion_point(field:pb.MessagePushReq.message)
    pub message: ::std::vec::Vec<super::common::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessagePushReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessagePushReq {
    fn default() -> &'a MessagePushReq {
        <MessagePushReq as ::protobuf::Message>::default_instance()
    }
}

impl MessagePushReq {
    pub fn new() -> MessagePushReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &MessagePushReq| { &m.header },
            |m: &mut MessagePushReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "message",
            |m: &MessagePushReq| { &m.message },
            |m: &mut MessagePushReq| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessagePushReq>(
            "MessagePushReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessagePushReq {
    const NAME: &'static str = "MessagePushReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.message.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.message {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.message {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessagePushReq {
        MessagePushReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessagePushReq {
        static instance: MessagePushReq = MessagePushReq {
            header: ::protobuf::MessageField::none(),
            message: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessagePushReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessagePushReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessagePushReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessagePushReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessagePushResp 推送消息响应
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessagePushResp)
pub struct MessagePushResp {
    // message fields
    // @@protoc_insertion_point(field:pb.MessagePushResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessagePushResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessagePushResp {
    fn default() -> &'a MessagePushResp {
        <MessagePushResp as ::protobuf::Message>::default_instance()
    }
}

impl MessagePushResp {
    pub fn new() -> MessagePushResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &MessagePushResp| { &m.header },
            |m: &mut MessagePushResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessagePushResp>(
            "MessagePushResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessagePushResp {
    const NAME: &'static str = "MessagePushResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessagePushResp {
        MessagePushResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessagePushResp {
        static instance: MessagePushResp = MessagePushResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessagePushResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessagePushResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessagePushResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessagePushResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// MessageContentText 图文消息
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.MessageContentText)
pub struct MessageContentText {
    // message fields
    /// items 图文消息
    // @@protoc_insertion_point(field:pb.MessageContentText.items)
    pub items: ::std::vec::Vec<message_content_text::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.MessageContentText.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageContentText {
    fn default() -> &'a MessageContentText {
        <MessageContentText as ::protobuf::Message>::default_instance()
    }
}

impl MessageContentText {
    pub fn new() -> MessageContentText {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &MessageContentText| { &m.items },
            |m: &mut MessageContentText| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageContentText>(
            "MessageContentText",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageContentText {
    const NAME: &'static str = "MessageContentText";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageContentText {
        MessageContentText::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageContentText {
        static instance: MessageContentText = MessageContentText {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageContentText {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageContentText").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageContentText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageContentText {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MessageContentText`
pub mod message_content_text {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:pb.MessageContentText.Item)
    pub struct Item {
        // message fields
        /// 类型
        // @@protoc_insertion_point(field:pb.MessageContentText.Item.type)
        pub type_: ::protobuf::EnumOrUnknown<item::Type>,
        /// 文本
        // @@protoc_insertion_point(field:pb.MessageContentText.Item.text)
        pub text: ::std::string::String,
        // @@protoc_insertion_point(field:pb.MessageContentText.Item.image)
        pub image: ::protobuf::MessageField<item::Image>,
        // @@protoc_insertion_point(field:pb.MessageContentText.Item.at)
        pub at: ::protobuf::MessageField<item::At>,
        // special fields
        // @@protoc_insertion_point(special_field:pb.MessageContentText.Item.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Item {
        fn default() -> &'a Item {
            <Item as ::protobuf::Message>::default_instance()
        }
    }

    impl Item {
        pub fn new() -> Item {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &Item| { &m.type_ },
                |m: &mut Item| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "text",
                |m: &Item| { &m.text },
                |m: &mut Item| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, item::Image>(
                "image",
                |m: &Item| { &m.image },
                |m: &mut Item| { &mut m.image },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, item::At>(
                "at",
                |m: &Item| { &m.at },
                |m: &mut Item| { &mut m.at },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Item>(
                "MessageContentText.Item",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Item {
        const NAME: &'static str = "Item";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        self.text = is.read_string()?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.image)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.at)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.type_ != ::protobuf::EnumOrUnknown::new(item::Type::TEXT) {
                my_size += ::protobuf::rt::int32_size(1, self.type_.value());
            }
            if !self.text.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.text);
            }
            if let Some(v) = self.image.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.at.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.type_ != ::protobuf::EnumOrUnknown::new(item::Type::TEXT) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
            }
            if !self.text.is_empty() {
                os.write_string(2, &self.text)?;
            }
            if let Some(v) = self.image.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.at.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Item {
            Item::new()
        }

        fn clear(&mut self) {
            self.type_ = ::protobuf::EnumOrUnknown::new(item::Type::TEXT);
            self.text.clear();
            self.image.clear();
            self.at.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Item {
            static instance: Item = Item {
                type_: ::protobuf::EnumOrUnknown::from_i32(0),
                text: ::std::string::String::new(),
                image: ::protobuf::MessageField::none(),
                at: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Item {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MessageContentText.Item").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Item {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Item {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Item`
    pub mod item {
        /// 图片
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:pb.MessageContentText.Item.Image)
        pub struct Image {
            // message fields
            /// 图片地址
            // @@protoc_insertion_point(field:pb.MessageContentText.Item.Image.url)
            pub url: ::std::string::String,
            /// 宽度
            // @@protoc_insertion_point(field:pb.MessageContentText.Item.Image.width)
            pub width: i32,
            /// 高度
            // @@protoc_insertion_point(field:pb.MessageContentText.Item.Image.height)
            pub height: i32,
            // special fields
            // @@protoc_insertion_point(special_field:pb.MessageContentText.Item.Image.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Image {
            fn default() -> &'a Image {
                <Image as ::protobuf::Message>::default_instance()
            }
        }

        impl Image {
            pub fn new() -> Image {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "url",
                    |m: &Image| { &m.url },
                    |m: &mut Image| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "width",
                    |m: &Image| { &m.width },
                    |m: &mut Image| { &mut m.width },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "height",
                    |m: &Image| { &m.height },
                    |m: &mut Image| { &mut m.height },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Image>(
                    "MessageContentText.Item.Image",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Image {
            const NAME: &'static str = "Image";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.url = is.read_string()?;
                        },
                        16 => {
                            self.width = is.read_int32()?;
                        },
                        24 => {
                            self.height = is.read_int32()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.url.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.url);
                }
                if self.width != 0 {
                    my_size += ::protobuf::rt::int32_size(2, self.width);
                }
                if self.height != 0 {
                    my_size += ::protobuf::rt::int32_size(3, self.height);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.url.is_empty() {
                    os.write_string(1, &self.url)?;
                }
                if self.width != 0 {
                    os.write_int32(2, self.width)?;
                }
                if self.height != 0 {
                    os.write_int32(3, self.height)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Image {
                Image::new()
            }

            fn clear(&mut self) {
                self.url.clear();
                self.width = 0;
                self.height = 0;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Image {
                static instance: Image = Image {
                    url: ::std::string::String::new(),
                    width: 0,
                    height: 0,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Image {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("MessageContentText.Item.Image").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Image {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Image {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// @用户信息
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:pb.MessageContentText.Item.At)
        pub struct At {
            // message fields
            /// 用户id
            // @@protoc_insertion_point(field:pb.MessageContentText.Item.At.userId)
            pub userId: ::std::string::String,
            /// 用户名称, 渲染时先获取用户本地信息中的备注，如果没有备注，那么就显示该名称
            // @@protoc_insertion_point(field:pb.MessageContentText.Item.At.name)
            pub name: ::std::string::String,
            // special fields
            // @@protoc_insertion_point(special_field:pb.MessageContentText.Item.At.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a At {
            fn default() -> &'a At {
                <At as ::protobuf::Message>::default_instance()
            }
        }

        impl At {
            pub fn new() -> At {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "userId",
                    |m: &At| { &m.userId },
                    |m: &mut At| { &mut m.userId },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "name",
                    |m: &At| { &m.name },
                    |m: &mut At| { &mut m.name },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<At>(
                    "MessageContentText.Item.At",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for At {
            const NAME: &'static str = "At";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.userId = is.read_string()?;
                        },
                        18 => {
                            self.name = is.read_string()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.userId.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.userId);
                }
                if !self.name.is_empty() {
                    my_size += ::protobuf::rt::string_size(2, &self.name);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.userId.is_empty() {
                    os.write_string(1, &self.userId)?;
                }
                if !self.name.is_empty() {
                    os.write_string(2, &self.name)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> At {
                At::new()
            }

            fn clear(&mut self) {
                self.userId.clear();
                self.name.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static At {
                static instance: At = At {
                    userId: ::std::string::String::new(),
                    name: ::std::string::String::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for At {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("MessageContentText.Item.At").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for At {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for At {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:pb.MessageContentText.Item.Type)
        pub enum Type {
            // @@protoc_insertion_point(enum_value:pb.MessageContentText.Item.Type.TEXT)
            TEXT = 0,
            // @@protoc_insertion_point(enum_value:pb.MessageContentText.Item.Type.IMAGE)
            IMAGE = 1,
            // @@protoc_insertion_point(enum_value:pb.MessageContentText.Item.Type.AT)
            AT = 2,
        }

        impl ::protobuf::Enum for Type {
            const NAME: &'static str = "Type";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Type> {
                match value {
                    0 => ::std::option::Option::Some(Type::TEXT),
                    1 => ::std::option::Option::Some(Type::IMAGE),
                    2 => ::std::option::Option::Some(Type::AT),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Type] = &[
                Type::TEXT,
                Type::IMAGE,
                Type::AT,
            ];
        }

        impl ::protobuf::EnumFull for Type {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("MessageContentText.Item.Type").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::TEXT
            }
        }

        impl Type {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("MessageContentText.Item.Type")
            }
        }
    }
}

/// NoticeContentNewFriendRequest 通知内容-新的好友请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeContentNewFriendRequest)
pub struct NoticeContentNewFriendRequest {
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeContentNewFriendRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeContentNewFriendRequest {
    fn default() -> &'a NoticeContentNewFriendRequest {
        <NoticeContentNewFriendRequest as ::protobuf::Message>::default_instance()
    }
}

impl NoticeContentNewFriendRequest {
    pub fn new() -> NoticeContentNewFriendRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeContentNewFriendRequest>(
            "NoticeContentNewFriendRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeContentNewFriendRequest {
    const NAME: &'static str = "NoticeContentNewFriendRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeContentNewFriendRequest {
        NoticeContentNewFriendRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeContentNewFriendRequest {
        static instance: NoticeContentNewFriendRequest = NoticeContentNewFriendRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeContentNewFriendRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeContentNewFriendRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeContentNewFriendRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeContentNewFriendRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// NoticeContentJoinNewGroup 通知内容-加入新群
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeContentJoinNewGroup)
pub struct NoticeContentJoinNewGroup {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeContentJoinNewGroup.groupId)
    pub groupId: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeContentJoinNewGroup.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeContentJoinNewGroup {
    fn default() -> &'a NoticeContentJoinNewGroup {
        <NoticeContentJoinNewGroup as ::protobuf::Message>::default_instance()
    }
}

impl NoticeContentJoinNewGroup {
    pub fn new() -> NoticeContentJoinNewGroup {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "groupId",
            |m: &NoticeContentJoinNewGroup| { &m.groupId },
            |m: &mut NoticeContentJoinNewGroup| { &mut m.groupId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeContentJoinNewGroup>(
            "NoticeContentJoinNewGroup",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeContentJoinNewGroup {
    const NAME: &'static str = "NoticeContentJoinNewGroup";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.groupId = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.groupId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.groupId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.groupId.is_empty() {
            os.write_string(1, &self.groupId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeContentJoinNewGroup {
        NoticeContentJoinNewGroup::new()
    }

    fn clear(&mut self) {
        self.groupId.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeContentJoinNewGroup {
        static instance: NoticeContentJoinNewGroup = NoticeContentJoinNewGroup {
            groupId: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeContentJoinNewGroup {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeContentJoinNewGroup").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeContentJoinNewGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeContentJoinNewGroup {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// NoticeContentOnlineStatus 通知内容-用户在线状态
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeContentOnlineStatus)
pub struct NoticeContentOnlineStatus {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeContentOnlineStatus.userId)
    pub userId: ::std::string::String,
    // @@protoc_insertion_point(field:pb.NoticeContentOnlineStatus.online)
    pub online: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeContentOnlineStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeContentOnlineStatus {
    fn default() -> &'a NoticeContentOnlineStatus {
        <NoticeContentOnlineStatus as ::protobuf::Message>::default_instance()
    }
}

impl NoticeContentOnlineStatus {
    pub fn new() -> NoticeContentOnlineStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "userId",
            |m: &NoticeContentOnlineStatus| { &m.userId },
            |m: &mut NoticeContentOnlineStatus| { &mut m.userId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online",
            |m: &NoticeContentOnlineStatus| { &m.online },
            |m: &mut NoticeContentOnlineStatus| { &mut m.online },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeContentOnlineStatus>(
            "NoticeContentOnlineStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeContentOnlineStatus {
    const NAME: &'static str = "NoticeContentOnlineStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.userId = is.read_string()?;
                },
                16 => {
                    self.online = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.userId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.userId);
        }
        if self.online != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.userId.is_empty() {
            os.write_string(1, &self.userId)?;
        }
        if self.online != false {
            os.write_bool(2, self.online)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeContentOnlineStatus {
        NoticeContentOnlineStatus::new()
    }

    fn clear(&mut self) {
        self.userId.clear();
        self.online = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeContentOnlineStatus {
        static instance: NoticeContentOnlineStatus = NoticeContentOnlineStatus {
            userId: ::std::string::String::new(),
            online: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeContentOnlineStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeContentOnlineStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeContentOnlineStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeContentOnlineStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeSendReq)
pub struct NoticeSendReq {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeSendReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    // @@protoc_insertion_point(field:pb.NoticeSendReq.notice)
    pub notice: ::protobuf::MessageField<super::common::Notice>,
    /// 追加用户
    // @@protoc_insertion_point(field:pb.NoticeSendReq.userIds)
    pub userIds: ::std::vec::Vec<::std::string::String>,
    /// 是否广播
    // @@protoc_insertion_point(field:pb.NoticeSendReq.broadcast)
    pub broadcast: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeSendReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeSendReq {
    fn default() -> &'a NoticeSendReq {
        <NoticeSendReq as ::protobuf::Message>::default_instance()
    }
}

impl NoticeSendReq {
    pub fn new() -> NoticeSendReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &NoticeSendReq| { &m.header },
            |m: &mut NoticeSendReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Notice>(
            "notice",
            |m: &NoticeSendReq| { &m.notice },
            |m: &mut NoticeSendReq| { &mut m.notice },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "userIds",
            |m: &NoticeSendReq| { &m.userIds },
            |m: &mut NoticeSendReq| { &mut m.userIds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "broadcast",
            |m: &NoticeSendReq| { &m.broadcast },
            |m: &mut NoticeSendReq| { &mut m.broadcast },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeSendReq>(
            "NoticeSendReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeSendReq {
    const NAME: &'static str = "NoticeSendReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notice)?;
                },
                26 => {
                    self.userIds.push(is.read_string()?);
                },
                32 => {
                    self.broadcast = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.notice.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.userIds {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.broadcast != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.notice.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.userIds {
            os.write_string(3, &v)?;
        };
        if self.broadcast != false {
            os.write_bool(4, self.broadcast)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeSendReq {
        NoticeSendReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.notice.clear();
        self.userIds.clear();
        self.broadcast = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeSendReq {
        static instance: NoticeSendReq = NoticeSendReq {
            header: ::protobuf::MessageField::none(),
            notice: ::protobuf::MessageField::none(),
            userIds: ::std::vec::Vec::new(),
            broadcast: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeSendReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeSendReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeSendReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeSendReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeSendResp)
pub struct NoticeSendResp {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeSendResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeSendResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeSendResp {
    fn default() -> &'a NoticeSendResp {
        <NoticeSendResp as ::protobuf::Message>::default_instance()
    }
}

impl NoticeSendResp {
    pub fn new() -> NoticeSendResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &NoticeSendResp| { &m.header },
            |m: &mut NoticeSendResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeSendResp>(
            "NoticeSendResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeSendResp {
    const NAME: &'static str = "NoticeSendResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeSendResp {
        NoticeSendResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeSendResp {
        static instance: NoticeSendResp = NoticeSendResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeSendResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeSendResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeSendResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeSendResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeBatchSendReq)
pub struct NoticeBatchSendReq {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeBatchSendReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    // @@protoc_insertion_point(field:pb.NoticeBatchSendReq.notices)
    pub notices: ::std::vec::Vec<NoticeSendReq>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeBatchSendReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeBatchSendReq {
    fn default() -> &'a NoticeBatchSendReq {
        <NoticeBatchSendReq as ::protobuf::Message>::default_instance()
    }
}

impl NoticeBatchSendReq {
    pub fn new() -> NoticeBatchSendReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &NoticeBatchSendReq| { &m.header },
            |m: &mut NoticeBatchSendReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "notices",
            |m: &NoticeBatchSendReq| { &m.notices },
            |m: &mut NoticeBatchSendReq| { &mut m.notices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeBatchSendReq>(
            "NoticeBatchSendReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeBatchSendReq {
    const NAME: &'static str = "NoticeBatchSendReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.notices.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.notices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.notices {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeBatchSendReq {
        NoticeBatchSendReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.notices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeBatchSendReq {
        static instance: NoticeBatchSendReq = NoticeBatchSendReq {
            header: ::protobuf::MessageField::none(),
            notices: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeBatchSendReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeBatchSendReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeBatchSendReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeBatchSendReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.NoticeBatchSendResp)
pub struct NoticeBatchSendResp {
    // message fields
    // @@protoc_insertion_point(field:pb.NoticeBatchSendResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.NoticeBatchSendResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NoticeBatchSendResp {
    fn default() -> &'a NoticeBatchSendResp {
        <NoticeBatchSendResp as ::protobuf::Message>::default_instance()
    }
}

impl NoticeBatchSendResp {
    pub fn new() -> NoticeBatchSendResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &NoticeBatchSendResp| { &m.header },
            |m: &mut NoticeBatchSendResp| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NoticeBatchSendResp>(
            "NoticeBatchSendResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NoticeBatchSendResp {
    const NAME: &'static str = "NoticeBatchSendResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NoticeBatchSendResp {
        NoticeBatchSendResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NoticeBatchSendResp {
        static instance: NoticeBatchSendResp = NoticeBatchSendResp {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NoticeBatchSendResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NoticeBatchSendResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NoticeBatchSendResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NoticeBatchSendResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.ListNoticeReq)
pub struct ListNoticeReq {
    // message fields
    // @@protoc_insertion_point(field:pb.ListNoticeReq.header)
    pub header: ::protobuf::MessageField<super::common::RequestHeader>,
    /// 会话id
    // @@protoc_insertion_point(field:pb.ListNoticeReq.convList)
    pub convList: ::std::vec::Vec<list_notice_req::Conversation>,
    /// SortGt 排序大于
    // @@protoc_insertion_point(field:pb.ListNoticeReq.SortGt)
    pub SortGt: i64,
    /// Limit 限制条数
    // @@protoc_insertion_point(field:pb.ListNoticeReq.Limit)
    pub Limit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:pb.ListNoticeReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListNoticeReq {
    fn default() -> &'a ListNoticeReq {
        <ListNoticeReq as ::protobuf::Message>::default_instance()
    }
}

impl ListNoticeReq {
    pub fn new() -> ListNoticeReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RequestHeader>(
            "header",
            |m: &ListNoticeReq| { &m.header },
            |m: &mut ListNoticeReq| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "convList",
            |m: &ListNoticeReq| { &m.convList },
            |m: &mut ListNoticeReq| { &mut m.convList },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SortGt",
            |m: &ListNoticeReq| { &m.SortGt },
            |m: &mut ListNoticeReq| { &mut m.SortGt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Limit",
            |m: &ListNoticeReq| { &m.Limit },
            |m: &mut ListNoticeReq| { &mut m.Limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListNoticeReq>(
            "ListNoticeReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListNoticeReq {
    const NAME: &'static str = "ListNoticeReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.convList.push(is.read_message()?);
                },
                24 => {
                    self.SortGt = is.read_int64()?;
                },
                32 => {
                    self.Limit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.convList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.SortGt != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.SortGt);
        }
        if self.Limit != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.Limit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.convList {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.SortGt != 0 {
            os.write_int64(3, self.SortGt)?;
        }
        if self.Limit != 0 {
            os.write_int64(4, self.Limit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListNoticeReq {
        ListNoticeReq::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.convList.clear();
        self.SortGt = 0;
        self.Limit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListNoticeReq {
        static instance: ListNoticeReq = ListNoticeReq {
            header: ::protobuf::MessageField::none(),
            convList: ::std::vec::Vec::new(),
            SortGt: 0,
            Limit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListNoticeReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListNoticeReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListNoticeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNoticeReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ListNoticeReq`
pub mod list_notice_req {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:pb.ListNoticeReq.Conversation)
    pub struct Conversation {
        // message fields
        /// 会话id
        // @@protoc_insertion_point(field:pb.ListNoticeReq.Conversation.conversationId)
        pub conversationId: ::std::string::String,
        /// 会话类型
        // @@protoc_insertion_point(field:pb.ListNoticeReq.Conversation.conversationType)
        pub conversationType: ::protobuf::EnumOrUnknown<super::super::common::ConversationType>,
        // special fields
        // @@protoc_insertion_point(special_field:pb.ListNoticeReq.Conversation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Conversation {
        fn default() -> &'a Conversation {
            <Conversation as ::protobuf::Message>::default_instance()
        }
    }

    impl Conversation {
        pub fn new() -> Conversation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "conversationId",
                |m: &Conversation| { &m.conversationId },
                |m: &mut Conversation| { &mut m.conversationId },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "conversationType",
                |m: &Conversation| { &m.conversationType },
                |m: &mut Conversation| { &mut m.conversationType },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Conversation>(
                "ListNoticeReq.Conversation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Conversation {
        const NAME: &'static str = "Conversation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.conversationId = is.read_string()?;
                    },
                    16 => {
                        self.conversationType = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.conversationId.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.conversationId);
            }
            if self.conversationType != ::protobuf::EnumOrUnknown::new(super::super::common::ConversationType::Single) {
                my_size += ::protobuf::rt::int32_size(2, self.conversationType.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.conversationId.is_empty() {
                os.write_string(1, &self.conversationId)?;
            }
            if self.conversationType != ::protobuf::EnumOrUnknown::new(super::super::common::ConversationType::Single) {
                os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.conversationType))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Conversation {
            Conversation::new()
        }

        fn clear(&mut self) {
            self.conversationId.clear();
            self.conversationType = ::protobuf::EnumOrUnknown::new(super::super::common::ConversationType::Single);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Conversation {
            static instance: Conversation = Conversation {
                conversationId: ::std::string::String::new(),
                conversationType: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Conversation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ListNoticeReq.Conversation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Conversation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Conversation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.ListNoticeResp)
pub struct ListNoticeResp {
    // message fields
    // @@protoc_insertion_point(field:pb.ListNoticeResp.header)
    pub header: ::protobuf::MessageField<super::common::ResponseHeader>,
    // @@protoc_insertion_point(field:pb.ListNoticeResp.notices)
    pub notices: ::std::vec::Vec<super::common::Notice>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.ListNoticeResp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListNoticeResp {
    fn default() -> &'a ListNoticeResp {
        <ListNoticeResp as ::protobuf::Message>::default_instance()
    }
}

impl ListNoticeResp {
    pub fn new() -> ListNoticeResp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::ResponseHeader>(
            "header",
            |m: &ListNoticeResp| { &m.header },
            |m: &mut ListNoticeResp| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "notices",
            |m: &ListNoticeResp| { &m.notices },
            |m: &mut ListNoticeResp| { &mut m.notices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListNoticeResp>(
            "ListNoticeResp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListNoticeResp {
    const NAME: &'static str = "ListNoticeResp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.notices.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.notices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.notices {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListNoticeResp {
        ListNoticeResp::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.notices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListNoticeResp {
        static instance: ListNoticeResp = ListNoticeResp {
            header: ::protobuf::MessageField::none(),
            notices: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListNoticeResp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListNoticeResp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListNoticeResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNoticeResp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x12\x02pb\x1a\x0ccommon.proto\"\x86\x01\n\x0eMessageSe\
    ndReq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.RequestHeaderR\x06he\
    ader\x12%\n\x07message\x18\x02\x20\x01(\x0b2\x0b.pb.MessageR\x07message\
    \x12\"\n\x0cdisableQueue\x18\x03\x20\x01(\x08R\x0cdisableQueue\"=\n\x0fM\
    essageSendResp\x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.pb.ResponseHea\
    derR\x06header\"\x8d\x01\n\x13MessageBatchSendReq\x12)\n\x06header\x18\
    \x01\x20\x01(\x0b2\x11.pb.RequestHeaderR\x06header\x12'\n\x08messages\
    \x18\x02\x20\x03(\x0b2\x0b.pb.MessageR\x08messages\x12\"\n\x0cdisableQue\
    ue\x18\x03\x20\x01(\x08R\x0cdisableQueue\"B\n\x14MessageBatchSendResp\
    \x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.pb.ResponseHeaderR\x06header\
    \"f\n\x10MessageInsertReq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.\
    RequestHeaderR\x06header\x12'\n\x08messages\x18\x02\x20\x03(\x0b2\x0b.pb\
    .MessageR\x08messages\"?\n\x11MessageInsertResp\x12*\n\x06header\x18\x01\
    \x20\x01(\x0b2\x12.pb.ResponseHeaderR\x06header\"b\n\x0eMessagePushReq\
    \x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.RequestHeaderR\x06header\
    \x12%\n\x07message\x18\x02\x20\x03(\x0b2\x0b.pb.MessageR\x07message\"=\n\
    \x0fMessagePushResp\x12*\n\x06header\x18\x01\x20\x01(\x0b2\x12.pb.Respon\
    seHeaderR\x06header\"\xbe\x03\n\x12MessageContentText\x121\n\x05items\
    \x18\x01\x20\x03(\x0b2\x1b.pb.MessageContentText.ItemR\x05items\x1a\xf4\
    \x02\n\x04Item\x124\n\x04type\x18\x01\x20\x01(\x0e2\x20.pb.MessageConten\
    tText.Item.TypeR\x04type\x12\x12\n\x04text\x18\x02\x20\x01(\tR\x04text\
    \x12<\n\x05image\x18\x03\x20\x01(\x0b2!.pb.MessageContentText.Item.Image\
    H\0R\x05image\x88\x01\x01\x123\n\x02at\x18\x04\x20\x01(\x0b2\x1e.pb.Mess\
    ageContentText.Item.AtH\x01R\x02at\x88\x01\x01\x1aG\n\x05Image\x12\x10\n\
    \x03url\x18\x01\x20\x01(\tR\x03url\x12\x14\n\x05width\x18\x02\x20\x01(\
    \x05R\x05width\x12\x16\n\x06height\x18\x03\x20\x01(\x05R\x06height\x1a0\
    \n\x02At\x12\x16\n\x06userId\x18\x01\x20\x01(\tR\x06userId\x12\x12\n\x04\
    name\x18\x02\x20\x01(\tR\x04name\"#\n\x04Type\x12\x08\n\x04TEXT\x10\0\
    \x12\t\n\x05IMAGE\x10\x01\x12\x06\n\x02AT\x10\x02B\x08\n\x06_imageB\x05\
    \n\x03_at\"\x1f\n\x1dNoticeContentNewFriendRequest\"5\n\x19NoticeContent\
    JoinNewGroup\x12\x18\n\x07groupId\x18\x01\x20\x01(\tR\x07groupId\"K\n\
    \x19NoticeContentOnlineStatus\x12\x16\n\x06userId\x18\x01\x20\x01(\tR\
    \x06userId\x12\x16\n\x06online\x18\x02\x20\x01(\x08R\x06online\"\x96\x01\
    \n\rNoticeSendReq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.RequestH\
    eaderR\x06header\x12\"\n\x06notice\x18\x02\x20\x01(\x0b2\n.pb.NoticeR\
    \x06notice\x12\x18\n\x07userIds\x18\x03\x20\x03(\tR\x07userIds\x12\x1c\n\
    \tbroadcast\x18\x04\x20\x01(\x08R\tbroadcast\"<\n\x0eNoticeSendResp\x12*\
    \n\x06header\x18\x01\x20\x01(\x0b2\x12.pb.ResponseHeaderR\x06header\"l\n\
    \x12NoticeBatchSendReq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.Req\
    uestHeaderR\x06header\x12+\n\x07notices\x18\x02\x20\x03(\x0b2\x11.pb.Not\
    iceSendReqR\x07notices\"A\n\x13NoticeBatchSendResp\x12*\n\x06header\x18\
    \x01\x20\x01(\x0b2\x12.pb.ResponseHeaderR\x06header\"\x9e\x02\n\rListNot\
    iceReq\x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.pb.RequestHeaderR\x06h\
    eader\x12:\n\x08convList\x18\x02\x20\x03(\x0b2\x1e.pb.ListNoticeReq.Conv\
    ersationR\x08convList\x12\x16\n\x06SortGt\x18\x03\x20\x01(\x03R\x06SortG\
    t\x12\x14\n\x05Limit\x18\x04\x20\x01(\x03R\x05Limit\x1ax\n\x0cConversati\
    on\x12&\n\x0econversationId\x18\x01\x20\x01(\tR\x0econversationId\x12@\n\
    \x10conversationType\x18\x02\x20\x01(\x0e2\x14.pb.ConversationTypeR\x10c\
    onversationType\"b\n\x0eListNoticeResp\x12*\n\x06header\x18\x01\x20\x01(\
    \x0b2\x12.pb.ResponseHeaderR\x06header\x12$\n\x07notices\x18\x02\x20\x03\
    (\x0b2\n.pb.NoticeR\x07notices2\x85\x02\n\x0emessageService\x12<\n\rMess\
    ageInsert\x12\x14.pb.MessageInsertReq\x1a\x15.pb.MessageInsertResp\x126\
    \n\x0bMessageSend\x12\x12.pb.MessageSendReq\x1a\x13.pb.MessageSendResp\
    \x12E\n\x10MessageBatchSend\x12\x17.pb.MessageBatchSendReq\x1a\x18.pb.Me\
    ssageBatchSendResp\x126\n\x0bMessagePush\x12\x12.pb.MessagePushReq\x1a\
    \x13.pb.MessagePushResp2\xbd\x01\n\rnoticeService\x123\n\nNoticeSend\x12\
    \x11.pb.NoticeSendReq\x1a\x12.pb.NoticeSendResp\x12B\n\x0fNoticeBatchSen\
    d\x12\x16.pb.NoticeBatchSendReq\x1a\x17.pb.NoticeBatchSendResp\x123\n\nL\
    istNotice\x12\x11.pb.ListNoticeReq\x1a\x12.pb.ListNoticeRespB\x06Z\x04./\
    pbJ\xb9)\n\x07\x12\x05\0\0\xb0\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x0b\n\x08\n\x01\x08\x12\x03\x02\0\x1b\n\t\n\
    \x02\x08\x0b\x12\x03\x02\0\x1b\n\t\n\x02\x03\0\x12\x03\x03\0\x16\n.\n\
    \x02\x04\0\x12\x04\x06\0\x0c\x01\x1a\"MessageSendReq\x20\xe5\x8f\x91\xe9\
    \x80\x81\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\xe6\xb1\x82\n\n\n\n\x03\x04\
    \0\x01\x12\x03\x06\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x1b\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x07\x02\x0f\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x07\x10\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x19\x1a\
    \n\x14\n\x04\x04\0\x02\x01\x12\x03\t\x02\x16\x1a\x07\xe6\xb6\x88\xe6\x81\
    \xaf\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\t\x02\t\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\t\n\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x14\
    \x15\n\x1d\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\x18\x1a\x10\xe7\xa6\x81\
    \xe6\xad\xa2\xe8\xb5\xb0\xe9\x98\x9f\xe5\x88\x97\n\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x0b\x02\x06\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\
    \x07\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x16\x17\n/\n\x02\x04\
    \x01\x12\x04\x0f\0\x11\x01\x1a#MessageSendResp\x20\xe5\x8f\x91\xe9\x80\
    \x81\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\xba\x94\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x0f\x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x02\x1c\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x10\x02\x10\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x10\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x1a\
    \x1b\n9\n\x02\x04\x02\x12\x04\x14\0\x1a\x01\x1a-MessageBatchSendReq\x20\
    \xe6\x89\xb9\xe9\x87\x8f\xe5\x8f\x91\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\
    \xe8\xaf\xb7\xe6\xb1\x82\n\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x1b\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x02\x1b\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03\x15\x02\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x15\x10\
    \x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15\x19\x1a\n\x14\n\x04\x04\
    \x02\x02\x01\x12\x03\x17\x02\x20\x1a\x07\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x17\x0b\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x17\x13\
    \x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x17\x1e\x1f\n\x1d\n\x04\x04\
    \x02\x02\x02\x12\x03\x19\x02\x18\x1a\x10\xe7\xa6\x81\xe6\xad\xa2\xe8\xb5\
    \xb0\xe9\x98\x9f\xe5\x88\x97\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\
    \x19\x02\x06\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x19\x07\x13\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x19\x16\x17\n:\n\x02\x04\x03\x12\x04\
    \x1d\0\x1f\x01\x1a.MessageBatchSendResp\x20\xe6\x89\xb9\xe9\x87\x8f\xe5\
    \x8f\x91\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\xba\x94\n\n\
    \n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x1e\x02\x1c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1e\x02\x10\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x1e\x11\x17\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1e\x1a\x1b\n0\n\x02\x04\x04\x12\x04\"\0&\x01\x1a$MessageIn\
    sertReq\x20\xe6\x8f\x92\xe5\x85\xa5\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\
    \xe6\xb1\x82\n\n\n\n\x03\x04\x04\x01\x12\x03\"\x08\x18\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03#\x02\x1b\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03#\x02\
    \x0f\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03#\x10\x16\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03#\x19\x1a\n\x14\n\x04\x04\x04\x02\x01\x12\x03%\x02\x20\
    \x1a\x07\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\
    \x03%\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03%\x0b\x12\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03%\x13\x1b\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03%\x1e\x1f\n1\n\x02\x04\x05\x12\x04)\0+\x01\x1a%MessageInsertResp\
    \x20\xe6\x8f\x92\xe5\x85\xa5\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\xba\
    \x94\n\n\n\n\x03\x04\x05\x01\x12\x03)\x08\x19\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03*\x02\x1c\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03*\x02\x10\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03*\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03*\x1a\x1b\n.\n\x02\x04\x06\x12\x04.\02\x01\x1a\"MessagePushReq\
    \x20\xe6\x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\xe6\xb1\
    \x82\n\n\n\n\x03\x04\x06\x01\x12\x03.\x08\x16\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03/\x02\x1b\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03/\x02\x0f\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03/\x10\x16\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03/\x19\x1a\n\x14\n\x04\x04\x06\x02\x01\x12\x031\x02\x1f\x1a\x07\
    \xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x031\x02\
    \n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x031\x0b\x12\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x031\x13\x1a\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x031\
    \x1d\x1e\n/\n\x02\x04\x07\x12\x045\07\x01\x1a#MessagePushResp\x20\xe6\
    \x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\xba\x94\n\n\
    \n\n\x03\x04\x07\x01\x12\x035\x08\x17\n\x0b\n\x04\x04\x07\x02\0\x12\x036\
    \x02\x1c\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x036\x02\x10\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x036\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x036\
    \x1a\x1b\n,\n\x02\x04\x08\x12\x04:\0]\x01\x1a\x20MessageContentText\x20\
    \xe5\x9b\xbe\xe6\x96\x87\xe6\xb6\x88\xe6\x81\xaf\n\n\n\n\x03\x04\x08\x01\
    \x12\x03:\x08\x1a\n\x0c\n\x04\x04\x08\x03\0\x12\x04;\x02Z\x03\n\x0c\n\
    \x05\x04\x08\x03\0\x01\x12\x03;\n\x0e\n\x0e\n\x06\x04\x08\x03\0\x04\0\
    \x12\x04<\x04C\x05\n\x0e\n\x07\x04\x08\x03\0\x04\0\x01\x12\x03<\t\r\n\
    \x18\n\x08\x04\x08\x03\0\x04\0\x02\0\x12\x03>\x06\x0f\x1a\x07\xe6\x96\
    \x87\xe6\x9c\xac\n\n\x10\n\t\x04\x08\x03\0\x04\0\x02\0\x01\x12\x03>\x06\
    \n\n\x10\n\t\x04\x08\x03\0\x04\0\x02\0\x02\x12\x03>\r\x0e\n\x18\n\x08\
    \x04\x08\x03\0\x04\0\x02\x01\x12\x03@\x06\x10\x1a\x07\xe5\x9b\xbe\xe7\
    \x89\x87\n\n\x10\n\t\x04\x08\x03\0\x04\0\x02\x01\x01\x12\x03@\x06\x0b\n\
    \x10\n\t\x04\x08\x03\0\x04\0\x02\x01\x02\x12\x03@\x0e\x0f\n\x13\n\x08\
    \x04\x08\x03\0\x04\0\x02\x02\x12\x03B\x06\r\x1a\x02@\n\n\x10\n\t\x04\x08\
    \x03\0\x04\0\x02\x02\x01\x12\x03B\x06\x08\n\x10\n\t\x04\x08\x03\0\x04\0\
    \x02\x02\x02\x12\x03B\x0b\x0c\n\x17\n\x06\x04\x08\x03\0\x03\0\x12\x04E\
    \x04L\x05\x1a\x07\xe5\x9b\xbe\xe7\x89\x87\n\n\x0e\n\x07\x04\x08\x03\0\
    \x03\0\x01\x12\x03E\x0c\x11\n\x1e\n\x08\x04\x08\x03\0\x03\0\x02\0\x12\
    \x03G\x06\x15\x1a\r\xe5\x9b\xbe\xe7\x89\x87\xe5\x9c\xb0\xe5\x9d\x80\n\n\
    \x10\n\t\x04\x08\x03\0\x03\0\x02\0\x05\x12\x03G\x06\x0c\n\x10\n\t\x04\
    \x08\x03\0\x03\0\x02\0\x01\x12\x03G\r\x10\n\x10\n\t\x04\x08\x03\0\x03\0\
    \x02\0\x03\x12\x03G\x13\x14\n\x18\n\x08\x04\x08\x03\0\x03\0\x02\x01\x12\
    \x03I\x06\x16\x1a\x07\xe5\xae\xbd\xe5\xba\xa6\n\n\x10\n\t\x04\x08\x03\0\
    \x03\0\x02\x01\x05\x12\x03I\x06\x0b\n\x10\n\t\x04\x08\x03\0\x03\0\x02\
    \x01\x01\x12\x03I\x0c\x11\n\x10\n\t\x04\x08\x03\0\x03\0\x02\x01\x03\x12\
    \x03I\x14\x15\n\x18\n\x08\x04\x08\x03\0\x03\0\x02\x02\x12\x03K\x06\x17\
    \x1a\x07\xe9\xab\x98\xe5\xba\xa6\n\n\x10\n\t\x04\x08\x03\0\x03\0\x02\x02\
    \x05\x12\x03K\x06\x0b\n\x10\n\t\x04\x08\x03\0\x03\0\x02\x02\x01\x12\x03K\
    \x0c\x12\n\x10\n\t\x04\x08\x03\0\x03\0\x02\x02\x03\x12\x03K\x15\x16\n\
    \x1e\n\x06\x04\x08\x03\0\x03\x01\x12\x04N\x04S\x05\x1a\x0e@\xe7\x94\xa8\
    \xe6\x88\xb7\xe4\xbf\xa1\xe6\x81\xaf\n\n\x0e\n\x07\x04\x08\x03\0\x03\x01\
    \x01\x12\x03N\x0c\x0e\n\x1a\n\x08\x04\x08\x03\0\x03\x01\x02\0\x12\x03P\
    \x06\x18\x1a\t\xe7\x94\xa8\xe6\x88\xb7id\n\n\x10\n\t\x04\x08\x03\0\x03\
    \x01\x02\0\x05\x12\x03P\x06\x0c\n\x10\n\t\x04\x08\x03\0\x03\x01\x02\0\
    \x01\x12\x03P\r\x13\n\x10\n\t\x04\x08\x03\0\x03\x01\x02\0\x03\x12\x03P\
    \x16\x17\n\x80\x01\n\x08\x04\x08\x03\0\x03\x01\x02\x01\x12\x03R\x06\x16\
    \x1ao\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xe7\xa7\xb0,\x20\xe6\xb8\xb2\
    \xe6\x9f\x93\xe6\x97\xb6\xe5\x85\x88\xe8\x8e\xb7\xe5\x8f\x96\xe7\x94\xa8\
    \xe6\x88\xb7\xe6\x9c\xac\xe5\x9c\xb0\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\
    \xe7\x9a\x84\xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\
    \xe6\xb2\xa1\xe6\x9c\x89\xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x8c\xe9\x82\xa3\
    \xe4\xb9\x88\xe5\xb0\xb1\xe6\x98\xbe\xe7\xa4\xba\xe8\xaf\xa5\xe5\x90\x8d\
    \xe7\xa7\xb0\n\n\x10\n\t\x04\x08\x03\0\x03\x01\x02\x01\x05\x12\x03R\x06\
    \x0c\n\x10\n\t\x04\x08\x03\0\x03\x01\x02\x01\x01\x12\x03R\r\x11\n\x10\n\
    \t\x04\x08\x03\0\x03\x01\x02\x01\x03\x12\x03R\x14\x15\n\x16\n\x06\x04\
    \x08\x03\0\x02\0\x12\x03U\x04\x12\x1a\x07\xe7\xb1\xbb\xe5\x9e\x8b\n\n\
    \x0e\n\x07\x04\x08\x03\0\x02\0\x06\x12\x03U\x04\x08\n\x0e\n\x07\x04\x08\
    \x03\0\x02\0\x01\x12\x03U\t\r\n\x0e\n\x07\x04\x08\x03\0\x02\0\x03\x12\
    \x03U\x10\x11\n\x16\n\x06\x04\x08\x03\0\x02\x01\x12\x03W\x04\x14\x1a\x07\
    \xe6\x96\x87\xe6\x9c\xac\n\n\x0e\n\x07\x04\x08\x03\0\x02\x01\x05\x12\x03\
    W\x04\n\n\x0e\n\x07\x04\x08\x03\0\x02\x01\x01\x12\x03W\x0b\x0f\n\x0e\n\
    \x07\x04\x08\x03\0\x02\x01\x03\x12\x03W\x12\x13\n\r\n\x06\x04\x08\x03\0\
    \x02\x02\x12\x03X\x04\x1d\n\x0e\n\x07\x04\x08\x03\0\x02\x02\x04\x12\x03X\
    \x04\x0c\n\x0e\n\x07\x04\x08\x03\0\x02\x02\x06\x12\x03X\r\x12\n\x0e\n\
    \x07\x04\x08\x03\0\x02\x02\x01\x12\x03X\x13\x18\n\x0e\n\x07\x04\x08\x03\
    \0\x02\x02\x03\x12\x03X\x1b\x1c\n\r\n\x06\x04\x08\x03\0\x02\x03\x12\x03Y\
    \x04\x17\n\x0e\n\x07\x04\x08\x03\0\x02\x03\x04\x12\x03Y\x04\x0c\n\x0e\n\
    \x07\x04\x08\x03\0\x02\x03\x06\x12\x03Y\r\x0f\n\x0e\n\x07\x04\x08\x03\0\
    \x02\x03\x01\x12\x03Y\x10\x12\n\x0e\n\x07\x04\x08\x03\0\x02\x03\x03\x12\
    \x03Y\x15\x16\n\x20\n\x04\x04\x08\x02\0\x12\x03\\\x02\x1a\x1a\x13items\
    \x20\xe5\x9b\xbe\xe6\x96\x87\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\x04\
    \x08\x02\0\x04\x12\x03\\\x02\n\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03\\\
    \x0b\x0f\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03\\\x10\x15\n\x0c\n\x05\x04\
    \x08\x02\0\x03\x12\x03\\\x18\x19\n\n\n\x02\x06\0\x12\x04_\0i\x01\n\n\n\
    \x03\x06\0\x01\x12\x03_\x08\x16\nP\n\x04\x06\0\x02\0\x12\x03b\x02B\x1aCM\
    essageInsert\x20\xe6\x8f\x92\xe5\x85\xa5\xe6\xb6\x88\xe6\x81\xaf\n\xe4\
    \xba\x8c\xe6\xac\xa1\xe5\xbc\x80\xe5\x8f\x91\xe6\x97\xb6\xef\xbc\x8c\xe9\
    \x9c\x80\xe8\xa6\x81\xe5\xae\x9e\xe7\x8e\xb0\xe8\xaf\xa5\xe6\x8e\xa5\xe5\
    \x8f\xa3\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03b\x06\x13\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x03b\x14$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03b/@\n&\n\
    \x04\x06\0\x02\x01\x12\x03d\x02<\x1a\x19MessageSend\x20\xe5\x8f\x91\xe9\
    \x80\x81\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    d\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03d\x12\x20\n\x0c\n\x05\x06\
    \0\x02\x01\x03\x12\x03d+:\n1\n\x04\x06\0\x02\x02\x12\x03f\x02K\x1a$Messa\
    geBatchSend\x20\xe6\x89\xb9\xe9\x87\x8f\xe5\x8f\x91\xe9\x80\x81\xe6\xb6\
    \x88\xe6\x81\xaf\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03f\x06\x16\n\x0c\
    \n\x05\x06\0\x02\x02\x02\x12\x03f\x17*\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03f5I\n&\n\x04\x06\0\x02\x03\x12\x03h\x02<\x1a\x19MessagePush\x20\xe6\
    \x8e\xa8\xe9\x80\x81\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03h\x06\x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03h\x12\x20\n\
    \x0c\n\x05\x06\0\x02\x03\x03\x12\x03h+:\nI\n\x02\x04\t\x12\x03l\0(\x1a>N\
    oticeContentNewFriendRequest\x20\xe9\x80\x9a\xe7\x9f\xa5\xe5\x86\x85\xe5\
    \xae\xb9-\xe6\x96\xb0\xe7\x9a\x84\xe5\xa5\xbd\xe5\x8f\x8b\xe8\xaf\xb7\
    \xe6\xb1\x82\n\n\n\n\x03\x04\t\x01\x12\x03l\x08%\n@\n\x02\x04\n\x12\x04n\
    \0p\x01\x1a4NoticeContentJoinNewGroup\x20\xe9\x80\x9a\xe7\x9f\xa5\xe5\
    \x86\x85\xe5\xae\xb9-\xe5\x8a\xa0\xe5\x85\xa5\xe6\x96\xb0\xe7\xbe\xa4\n\
    \n\n\n\x03\x04\n\x01\x12\x03n\x08!\n\x0b\n\x04\x04\n\x02\0\x12\x03o\x02\
    \x15\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03o\x02\x08\n\x0c\n\x05\x04\n\x02\
    \0\x01\x12\x03o\t\x10\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03o\x13\x14\nF\n\
    \x02\x04\x0b\x12\x04r\0u\x01\x1a:NoticeContentOnlineStatus\x20\xe9\x80\
    \x9a\xe7\x9f\xa5\xe5\x86\x85\xe5\xae\xb9-\xe7\x94\xa8\xe6\x88\xb7\xe5\
    \x9c\xa8\xe7\xba\xbf\xe7\x8a\xb6\xe6\x80\x81\n\n\n\n\x03\x04\x0b\x01\x12\
    \x03r\x08!\n\x17\n\x04\x04\x0b\x02\0\x12\x03s\x02\x14\"\n\x20\xe7\x94\
    \xa8\xe6\x88\xb7id\n\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03s\x02\x08\n\
    \x0c\n\x05\x04\x0b\x02\0\x01\x12\x03s\t\x0f\n\x0c\n\x05\x04\x0b\x02\0\
    \x03\x12\x03s\x12\x13\n$\n\x04\x04\x0b\x02\x01\x12\x03t\x02\x12\"\x17\
    \x20\xe6\x98\xaf\xe5\x9c\xa8\xe7\xba\xbf\xe8\xbf\x98\xe6\x98\xaf\xe7\xa6\
    \xbb\xe7\xba\xbf\n\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03t\x02\x06\n\
    \x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03t\x07\r\n\x0c\n\x05\x04\x0b\x02\
    \x01\x03\x12\x03t\x10\x11\n%\n\x02\x04\x0c\x12\x05y\0\x80\x01\x012\x18No\
    ticeSend\x20\xe9\x80\x9a\xe7\x9f\xa5\xe5\x8f\x91\xe9\x80\x81\n\n\n\n\x03\
    \x04\x0c\x01\x12\x03y\x08\x15\n\x0b\n\x04\x04\x0c\x02\0\x12\x03z\x02\x1b\
    \n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03z\x02\x0f\n\x0c\n\x05\x04\x0c\x02\
    \0\x01\x12\x03z\x10\x16\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03z\x19\x1a\n\
    \x0b\n\x04\x04\x0c\x02\x01\x12\x03{\x02\x14\n\x0c\n\x05\x04\x0c\x02\x01\
    \x06\x12\x03{\x02\x08\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03{\t\x0f\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03{\x12\x13\n\x1a\n\x04\x04\x0c\x02\
    \x02\x12\x03}\x02\x1e\x1a\r\xe8\xbf\xbd\xe5\x8a\xa0\xe7\x94\xa8\xe6\x88\
    \xb7\n\n\x0c\n\x05\x04\x0c\x02\x02\x04\x12\x03}\x02\n\n\x0c\n\x05\x04\
    \x0c\x02\x02\x05\x12\x03}\x0b\x11\n\x0c\n\x05\x04\x0c\x02\x02\x01\x12\
    \x03}\x12\x19\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03}\x1c\x1d\n\x1a\n\
    \x04\x04\x0c\x02\x03\x12\x03\x7f\x02\x15\x1a\r\xe6\x98\xaf\xe5\x90\xa6\
    \xe5\xb9\xbf\xe6\x92\xad\n\n\x0c\n\x05\x04\x0c\x02\x03\x05\x12\x03\x7f\
    \x02\x06\n\x0c\n\x05\x04\x0c\x02\x03\x01\x12\x03\x7f\x07\x10\n\x0c\n\x05\
    \x04\x0c\x02\x03\x03\x12\x03\x7f\x13\x14\n\x0c\n\x02\x04\r\x12\x06\x82\
    \x01\0\x84\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\x82\x01\x08\x16\n\x0c\n\
    \x04\x04\r\x02\0\x12\x04\x83\x01\x02\x1c\n\r\n\x05\x04\r\x02\0\x06\x12\
    \x04\x83\x01\x02\x10\n\r\n\x05\x04\r\x02\0\x01\x12\x04\x83\x01\x11\x17\n\
    \r\n\x05\x04\r\x02\0\x03\x12\x04\x83\x01\x1a\x1b\n1\n\x02\x04\x0e\x12\
    \x06\x88\x01\0\x8b\x01\x012#NoticeBatchSend\x20\xe9\x80\x9a\xe7\x9f\xa5\
    \xe6\x89\xb9\xe9\x87\x8f\xe5\x8f\x91\xe9\x80\x81\n\n\x0b\n\x03\x04\x0e\
    \x01\x12\x04\x88\x01\x08\x1a\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\x89\x01\
    \x02\x1b\n\r\n\x05\x04\x0e\x02\0\x06\x12\x04\x89\x01\x02\x0f\n\r\n\x05\
    \x04\x0e\x02\0\x01\x12\x04\x89\x01\x10\x16\n\r\n\x05\x04\x0e\x02\0\x03\
    \x12\x04\x89\x01\x19\x1a\n\x0c\n\x04\x04\x0e\x02\x01\x12\x04\x8a\x01\x02\
    %\n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04\x8a\x01\x02\n\n\r\n\x05\x04\x0e\
    \x02\x01\x06\x12\x04\x8a\x01\x0b\x18\n\r\n\x05\x04\x0e\x02\x01\x01\x12\
    \x04\x8a\x01\x19\x20\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\x8a\x01#$\n\
    \x0c\n\x02\x04\x0f\x12\x06\x8d\x01\0\x8f\x01\x01\n\x0b\n\x03\x04\x0f\x01\
    \x12\x04\x8d\x01\x08\x1b\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x8e\x01\x02\
    \x1c\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x8e\x01\x02\x10\n\r\n\x05\x04\
    \x0f\x02\0\x01\x12\x04\x8e\x01\x11\x17\n\r\n\x05\x04\x0f\x02\0\x03\x12\
    \x04\x8e\x01\x1a\x1b\n/\n\x02\x04\x10\x12\x06\x93\x01\0\xa1\x01\x012!Lis\
    tNoticeReq\x20\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x9a\xe7\x9f\xa5\xe5\x88\
    \x97\xe8\xa1\xa8\n\n\x0b\n\x03\x04\x10\x01\x12\x04\x93\x01\x08\x15\n\x0c\
    \n\x04\x04\x10\x02\0\x12\x04\x94\x01\x02\x1b\n\r\n\x05\x04\x10\x02\0\x06\
    \x12\x04\x94\x01\x02\x0f\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x94\x01\x10\
    \x16\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\x94\x01\x19\x1a\n\x0e\n\x04\x04\
    \x10\x03\0\x12\x06\x95\x01\x02\x9a\x01\x03\n\r\n\x05\x04\x10\x03\0\x01\
    \x12\x04\x95\x01\n\x16\n\x19\n\x06\x04\x10\x03\0\x02\0\x12\x04\x97\x01\
    \x04\x1e\x1a\t\xe4\xbc\x9a\xe8\xaf\x9did\n\n\x0f\n\x07\x04\x10\x03\0\x02\
    \0\x05\x12\x04\x97\x01\x04\n\n\x0f\n\x07\x04\x10\x03\0\x02\0\x01\x12\x04\
    \x97\x01\x0b\x19\n\x0f\n\x07\x04\x10\x03\0\x02\0\x03\x12\x04\x97\x01\x1c\
    \x1d\n\x1d\n\x06\x04\x10\x03\0\x02\x01\x12\x04\x99\x01\x04*\x1a\r\xe4\
    \xbc\x9a\xe8\xaf\x9d\xe7\xb1\xbb\xe5\x9e\x8b\n\n\x0f\n\x07\x04\x10\x03\0\
    \x02\x01\x06\x12\x04\x99\x01\x04\x14\n\x0f\n\x07\x04\x10\x03\0\x02\x01\
    \x01\x12\x04\x99\x01\x15%\n\x0f\n\x07\x04\x10\x03\0\x02\x01\x03\x12\x04\
    \x99\x01()\n\x17\n\x04\x04\x10\x02\x01\x12\x04\x9c\x01\x02%\x1a\t\xe4\
    \xbc\x9a\xe8\xaf\x9did\n\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\x9c\x01\
    \x02\n\n\r\n\x05\x04\x10\x02\x01\x06\x12\x04\x9c\x01\x0b\x17\n\r\n\x05\
    \x04\x10\x02\x01\x01\x12\x04\x9c\x01\x18\x20\n\r\n\x05\x04\x10\x02\x01\
    \x03\x12\x04\x9c\x01#$\n\"\n\x04\x04\x10\x02\x02\x12\x04\x9e\x01\x02\x13\
    \x1a\x14SortGt\x20\xe6\x8e\x92\xe5\xba\x8f\xe5\xa4\xa7\xe4\xba\x8e\n\n\r\
    \n\x05\x04\x10\x02\x02\x05\x12\x04\x9e\x01\x02\x07\n\r\n\x05\x04\x10\x02\
    \x02\x01\x12\x04\x9e\x01\x08\x0e\n\r\n\x05\x04\x10\x02\x02\x03\x12\x04\
    \x9e\x01\x11\x12\n!\n\x04\x04\x10\x02\x03\x12\x04\xa0\x01\x02\x12\x1a\
    \x13Limit\x20\xe9\x99\x90\xe5\x88\xb6\xe6\x9d\xa1\xe6\x95\xb0\n\n\r\n\
    \x05\x04\x10\x02\x03\x05\x12\x04\xa0\x01\x02\x07\n\r\n\x05\x04\x10\x02\
    \x03\x01\x12\x04\xa0\x01\x08\r\n\r\n\x05\x04\x10\x02\x03\x03\x12\x04\xa0\
    \x01\x10\x11\n\x0c\n\x02\x04\x11\x12\x06\xa3\x01\0\xa6\x01\x01\n\x0b\n\
    \x03\x04\x11\x01\x12\x04\xa3\x01\x08\x16\n\x0c\n\x04\x04\x11\x02\0\x12\
    \x04\xa4\x01\x02\x1c\n\r\n\x05\x04\x11\x02\0\x06\x12\x04\xa4\x01\x02\x10\
    \n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xa4\x01\x11\x17\n\r\n\x05\x04\x11\
    \x02\0\x03\x12\x04\xa4\x01\x1a\x1b\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\
    \xa5\x01\x02\x1e\n\r\n\x05\x04\x11\x02\x01\x04\x12\x04\xa5\x01\x02\n\n\r\
    \n\x05\x04\x11\x02\x01\x06\x12\x04\xa5\x01\x0b\x11\n\r\n\x05\x04\x11\x02\
    \x01\x01\x12\x04\xa5\x01\x12\x19\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\
    \xa5\x01\x1c\x1d\n\x0c\n\x02\x06\x01\x12\x06\xa9\x01\0\xb0\x01\x01\n\x0b\
    \n\x03\x06\x01\x01\x12\x04\xa9\x01\x08\x15\n&\n\x04\x06\x01\x02\0\x12\
    \x04\xab\x01\x029\x1a\x18NoticeSend\x20\xe9\x80\x9a\xe7\x9f\xa5\xe5\x8f\
    \x91\xe9\x80\x81\n\n\r\n\x05\x06\x01\x02\0\x01\x12\x04\xab\x01\x06\x10\n\
    \r\n\x05\x06\x01\x02\0\x02\x12\x04\xab\x01\x11\x1e\n\r\n\x05\x06\x01\x02\
    \0\x03\x12\x04\xab\x01)7\n1\n\x04\x06\x01\x02\x01\x12\x04\xad\x01\x02H\
    \x1a#NoticeBatchSend\x20\xe9\x80\x9a\xe7\x9f\xa5\xe6\x89\xb9\xe9\x87\x8f\
    \xe5\x8f\x91\xe9\x80\x81\n\n\r\n\x05\x06\x01\x02\x01\x01\x12\x04\xad\x01\
    \x06\x15\n\r\n\x05\x06\x01\x02\x01\x02\x12\x04\xad\x01\x16(\n\r\n\x05\
    \x06\x01\x02\x01\x03\x12\x04\xad\x013F\n,\n\x04\x06\x01\x02\x02\x12\x04\
    \xaf\x01\x029\x1a\x1eListNotice\x20\xe8\x8e\xb7\xe5\x8f\x96\xe9\x80\x9a\
    \xe7\x9f\xa5\xe5\x88\x97\xe8\xa1\xa8\n\n\r\n\x05\x06\x01\x02\x02\x01\x12\
    \x04\xaf\x01\x06\x10\n\r\n\x05\x06\x01\x02\x02\x02\x12\x04\xaf\x01\x11\
    \x1e\n\r\n\x05\x06\x01\x02\x02\x03\x12\x04\xaf\x01)7b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(22);
            messages.push(MessageSendReq::generated_message_descriptor_data());
            messages.push(MessageSendResp::generated_message_descriptor_data());
            messages.push(MessageBatchSendReq::generated_message_descriptor_data());
            messages.push(MessageBatchSendResp::generated_message_descriptor_data());
            messages.push(MessageInsertReq::generated_message_descriptor_data());
            messages.push(MessageInsertResp::generated_message_descriptor_data());
            messages.push(MessagePushReq::generated_message_descriptor_data());
            messages.push(MessagePushResp::generated_message_descriptor_data());
            messages.push(MessageContentText::generated_message_descriptor_data());
            messages.push(NoticeContentNewFriendRequest::generated_message_descriptor_data());
            messages.push(NoticeContentJoinNewGroup::generated_message_descriptor_data());
            messages.push(NoticeContentOnlineStatus::generated_message_descriptor_data());
            messages.push(NoticeSendReq::generated_message_descriptor_data());
            messages.push(NoticeSendResp::generated_message_descriptor_data());
            messages.push(NoticeBatchSendReq::generated_message_descriptor_data());
            messages.push(NoticeBatchSendResp::generated_message_descriptor_data());
            messages.push(ListNoticeReq::generated_message_descriptor_data());
            messages.push(ListNoticeResp::generated_message_descriptor_data());
            messages.push(message_content_text::Item::generated_message_descriptor_data());
            messages.push(message_content_text::item::Image::generated_message_descriptor_data());
            messages.push(message_content_text::item::At::generated_message_descriptor_data());
            messages.push(list_notice_req::Conversation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(message_content_text::item::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
