syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

//UserRegister 用户注册 二次开发人员可以传递自定义参数

//UserRegisterReq 用户注册请求
message UserRegisterReq {
  RequestHeader header = 1;
  string userId = 2; // 用户id 唯一
  optional int64 registerTime = 3; // 注册时间 13位时间戳 如果不传 默认为当前时间
  optional string nickname = 4; // 昵称
  optional string avatar = 5; // 头像url

  map<string, string> accountMap = 6; // 账号信息 你可以存放password、email、phone等等
  map<string, string> profileMap = 7; // 个人信息 你可以存放性别、年龄、生日等等
  map<string, string> extraMap = 8; // 扩展信息 你可以存放等级、积分、金币等等

  map<string, string> verifyMap = 9; // 验证信息 你可以存放smsCode、emailCode等等
}

//UserRegisterResp 用户注册响应
message UserRegisterResp {
  ResponseHeader header = 1;
}

//UserDestroy 用户注销

//UserDestroyReq 用户注销请求
message UserDestroyReq {
  RequestHeader header = 1;
  string userId = 2; // // 用户id 唯一
}

//UserDestroyResp 用户注销响应
message UserDestroyResp {
  ResponseHeader header = 1;
}

//UserAccessToken 用户通过accountMap获取token

//UserAccessTokenReq 用户登录请求
message UserAccessTokenReq {
  RequestHeader header = 1;
  map<string, string> accountMap = 2; // 账号信息 你可以存放password、email、phone等等
  map<string, string> verifyMap = 3; // 验证信息 你可以存放smsCode、emailCode等等
  optional int64 expireTime = 4; // 过期时间 13位时间戳
}

//UserAccessTokenResp 用户登录响应
message UserAccessTokenResp {
  ResponseHeader header = 1;
  string userId = 2; // 用户id 唯一
  string accessToken = 3; // 用户token
}

//RefreshUserAccessToken 刷新用户token

//RefreshUserAccessTokenReq 刷新用户token请求
message RefreshUserAccessTokenReq {
  RequestHeader header = 1;
  string userId = 2; // 用户id 唯一
}

//RefreshUserAccessTokenResp 刷新用户token响应
message RefreshUserAccessTokenResp {
  ResponseHeader header = 1;
}

//RevokeUserAccessToken 注销用户token

//RevokeUserAccessTokenReq 注销用户token
message RevokeUserAccessTokenReq {
  RequestHeader header = 1;
}

//RevokeUserAccessTokenResp 注销用户token
message RevokeUserAccessTokenResp {
  ResponseHeader header = 1;
}

//UpdateUserAccountMap 更新用户账号信息

//UpdateUserAccountMapReq 更新用户账号信息请求
message UpdateUserAccountMapReq {
  RequestHeader header = 1;
  map<string, string> accountMap = 2; // 账号信息 你可以存放password、email、phone等等
  map<string, string> verifyMap = 3; // 验证信息 你可以存放oldPassword、smsCode、emailCode等等
}

//UpdateUserAccountMapResp 更新用户账号信息响应
message UpdateUserAccountMapResp {
  ResponseHeader header = 1;
}

//UpdateUserProfileMap 更新用户个人信息

//UpdateUserProfileMapReq 更新用户个人信息请求
message UpdateUserProfileMapReq {
  RequestHeader header = 1;
  map<string, string> profileMap = 2; // 个人信息 你可以存放性别、年龄、生日等等
}

//UpdateUserProfileMapResp 更新用户个人信息响应
message UpdateUserProfileMapResp {
  ResponseHeader header = 1;
}

//UpdateUserExtraMap 更新用户扩展信息

//UpdateUserExtraMapReq 更新用户扩展信息请求
message UpdateUserExtraMapReq {
  RequestHeader header = 1;
  map<string, string> extraMap = 2; // 扩展信息 你可以存放等级、积分、金币等等
}

//UpdateUserExtraMapResp 更新用户扩展信息响应
message UpdateUserExtraMapResp {
  ResponseHeader header = 1;
}

//UpdateUserCountMapReq 更新用户计数信息请求
message UpdateUserCountMapReq {
  RequestHeader header = 1;

  enum CountType {
    friendCount = 0; // 好友数量
    joinGroupCount = 1; // 加入群数量
    createGroupCount = 2; // 创建群数量
  }
  CountType countType = 2;

  enum Algorithm {
    add = 0; // 加
    sub = 1; // 减
    fixed = 2; // 固定
  }
  Algorithm algorithm = 3;
  int64 count = 4;

  //是否统计 统计后同步到数据库
  bool statistics = 5;
}

//UpdateUserCountMapResp 更新用户计数信息响应
message UpdateUserCountMapResp {
  ResponseHeader header = 1;
}

//GetSelfUserInfo 获取自己的用户信息

//GetSelfUserInfoReq 获取自己的用户信息请求
message GetSelfUserInfoReq {
  RequestHeader header = 1;
}

//GetSelfUserInfoResp 获取自己的用户信息响应
message GetSelfUserInfoResp {
  ResponseHeader header = 1;
  string userId = 2; // 用户id 唯一
  optional int64 registerTime = 3; // 注册时间 13位时间戳 如果不传 默认为当前时间
  optional string nickname = 4; // 昵称
  optional string avatar = 5; // 头像url

  map<string, string> accountMap = 6; // 账号信息 你可以存放password、email、phone等等
  map<string, string> profileMap = 7; // 个人信息 你可以存放性别、年龄、生日等等
  map<string, string> extraMap = 8; // 扩展信息 你可以存放等级、积分、金币等等
}

//GetUserInfo 获取用户信息

//GetUserInfoReq 获取用户信息请求
message GetUserInfoReq {
  RequestHeader header = 1;
  string userId = 2; // 用户id 唯一
}

//GetUserInfoResp 获取用户信息响应
message GetUserInfoResp {
  ResponseHeader header = 1;
  string userId = 2; // 用户id 唯一
  optional int64 registerTime = 3; // 注册时间 13位时间戳 如果不传 默认为当前时间
  optional string nickname = 4; // 昵称
  optional string avatar = 5; // 头像url

  map<string, string> profileMap = 6; // 个人信息 你可以存放性别、年龄、生日等等
}

//ResetUserAccountMap 重置用户账号信息

//ResetUserAccountMapReq 重置用户账号信息请求
message ResetUserAccountMapReq {
  RequestHeader header = 1;
  map<string, string> accountMap = 2; // 账号信息 你可以存放password、email、phone等等
  map<string, string> verifyMap = 3; // 验证信息 你可以存放smsCode、emailCode等等
}

//ResetUserAccountMapResp 重置用户账号信息响应
message ResetUserAccountMapResp {
  ResponseHeader header = 1;
}

// UserAfterOnline 用户上线回调

//UserAfterOnlineReq 用户上线回调请求
message UserAfterOnlineReq {
  RequestHeader header = 1;
}

//UserAfterOnlineResp 用户上线回调响应
message UserAfterOnlineResp {
  ResponseHeader header = 1;
}

//UserAfterOffline 用户下线回调

//UserAfterOfflineReq 用户下线回调请求
message UserAfterOfflineReq {
  RequestHeader header = 1;
}

//UserAfterOfflineResp 用户下线回调响应
message UserAfterOfflineResp {
  ResponseHeader header = 1;
}

//UserBeforeConnect 用户连接前的回调

//UserBeforeConnectReq 服务端连接前的回调
message UserBeforeConnectReq {
  RequestHeader header = 1;
}

//UserBeforeConnectResp 服务端连接前的回调
message UserBeforeConnectResp {
  ResponseHeader header = 1;
  // 是否允许建立连接
  bool success = 2;
  // 如果不允许建立连接，返回的错误码
  WebsocketCustomCloseCode closeCode = 3;
  // 如果不允许建立连接，返回的错误信息
  string closeReason = 4;
  string userId = 5; // 成功的话返回用户id
}

//UserBeforeRequest 用户请求前的回调

//UserBeforeRequestReq 用户请求前的回调请求
message UserBeforeRequestReq {
  RequestHeader header = 1;
  string path = 2; // 请求路径
}

//UserBeforeRequestResp 用户请求前的回调响应
message UserBeforeRequestResp {
  ResponseHeader header = 1;
  string userId = 2; // 用户id
}

//UserAfterKeepAlive 用户保活回调

//UserAfterKeepAliveReq 用户保活回调请求
message UserAfterKeepAliveReq {
  RequestHeader header = 1;
}

//UserAfterKeepAliveResp 用户保活回调响应
message UserAfterKeepAliveResp {
  ResponseHeader header = 1;
}

//CreateRobot 创建机器人

//CreateRobotReq 创建机器人请求
message CreateRobotReq {
  RequestHeader header = 1;
  string robotId = 2; // 机器人id 唯一
  optional string nickname = 3; // 昵称
  optional string avatar = 4; // 头像url
}

//CreateRobotResp 创建机器人响应
message CreateRobotResp {
  ResponseHeader header = 1;
  string accessToken = 2; // 机器人token
}

//GetUserModel 获取用户模型

//GetUserModelReq 获取用户模型请求
message GetUserModelByIdReq {
  RequestHeader header = 1;
  string userId = 2; // 用户id 唯一
  message Opt {
    // 是否携带用户设置列表
    bool withUserSettings = 1;
    repeated string userSettingKeys = 2; // 用户设置key列表 如果withUserSettings为false 则该字段无效
  }
  optional Opt opt = 3;
}

//GetUserModelByIdResp 获取用户模型响应
message GetUserModelByIdResp {
  ResponseHeader header = 1;
  bytes userModelJson = 2; // 用户模型json
  bytes userSettingsJson = 3; // 用户设置json 他是map[string]usermodel.UserSetting的json
}

//GetUserModelByIdsReq 批量获取用户模型请求
message GetUserModelByIdsReq {
  RequestHeader header = 1;
  repeated string userIds = 2; // 用户id列表
  message Opt {
    // 是否携带用户设置列表
    bool withUserSettings = 1;
    repeated string userSettingKeys = 2; // 用户设置key列表 如果withUserSettings为false 则该字段无效
  }
  optional Opt opt = 3;
}

//GetUserModelByIdsResp 批量获取用户模型响应
message GetUserModelByIdsResp {
  ResponseHeader header = 1;
  map<string, bytes> userModelJsons = 2; // 用户模型json列表
  map<string, bytes> userSettingsJsons = 3; // 用户设置json列表 value是map[string]usermodel.UserSetting的json
}

service accountService {
  //UserRegister 用户注册
  //二次开发人员可以传递自定义参数 如果不满足你的需求 你可以修改该proto文件
  rpc UserRegister(UserRegisterReq) returns (UserRegisterResp);
  //UserDestroy 用户注销
  //注销逻辑可以从这里修改
  rpc UserDestroy(UserDestroyReq) returns (UserDestroyResp);
  //UserAccessToken 用户登录
  //登录逻辑可以从这里修改 默认是密码/手机号登录
  rpc UserAccessToken(UserAccessTokenReq) returns (UserAccessTokenResp);
  //RefreshUserAccessToken 刷新用户token
  //刷新逻辑可以从这里修改
  rpc RefreshUserAccessToken(RefreshUserAccessTokenReq) returns (RefreshUserAccessTokenResp);
  //RevokeUserAccessToken 注销用户token
  //注销逻辑可以从这里修改
  rpc RevokeUserAccessToken(RevokeUserAccessTokenReq) returns (RevokeUserAccessTokenResp);
  //UpdateUserAccountMap 更新用户账号信息
  //更新账号信息逻辑可以从这里修改 默认：如果是修改密码，需要旧密码或手机验证码。如果修改绑定手机号，需要验证新手机号的验证码
  rpc UpdateUserAccountMap(UpdateUserAccountMapReq) returns (UpdateUserAccountMapResp);
  //ResetUserAccountMap 重置用户账号信息
  //重置账号信息逻辑可以从这里修改
  rpc ResetUserAccountMap(ResetUserAccountMapReq) returns (ResetUserAccountMapResp);
  //CreateRobot 创建机器人
  //创建机器人逻辑可以从这里修改
  rpc CreateRobot(CreateRobotReq) returns (CreateRobotResp);
}

service infoService {
  //UpdateUserProfileMap 更新用户个人信息
  //更新个人信息逻辑可以从这里修改
  rpc UpdateUserProfileMap(UpdateUserProfileMapReq) returns (UpdateUserProfileMapResp);
  //UpdateUserExtraMap 更新用户扩展信息
  //更新扩展信息逻辑可以从这里修改
  rpc UpdateUserExtraMap(UpdateUserExtraMapReq) returns (UpdateUserExtraMapResp);
  //UpdateUserCountMap 更新用户计数信息
  //更新计数信息逻辑可以从这里修改
  rpc UpdateUserCountMap(UpdateUserCountMapReq) returns (UpdateUserCountMapResp);
  //GetSelfUserInfo 获取自己的用户信息
  //获取自己的用户信息逻辑可以从这里修改
  rpc GetSelfUserInfo(GetSelfUserInfoReq) returns (GetSelfUserInfoResp);
  //GetUserInfo 获取用户信息
  //获取用户信息逻辑可以从这里修改
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoResp);
  //GetUserModelById 获取用户模型
  //获取用户模型逻辑可以从这里修改
  rpc GetUserModelById(GetUserModelByIdReq) returns (GetUserModelByIdResp);
  //GetUserModelByIds 批量获取用户模型
  //批量获取用户模型逻辑可以从这里修改
  rpc GetUserModelByIds(GetUserModelByIdsReq) returns (GetUserModelByIdsResp);
}

service callbackService {
  //UserAfterOnline 用户上线回调
  //用户上线回调逻辑可以从这里修改
  rpc UserAfterOnline(UserAfterOnlineReq) returns (UserAfterOnlineResp);
  //UserAfterOffline 用户下线回调
  //用户下线回调逻辑可以从这里修改
  rpc UserAfterOffline(UserAfterOfflineReq) returns (UserAfterOfflineResp);
  //UserBeforeConnect 用户连接前的回调
  //用户连接前的回调逻辑可以从这里修改
  rpc UserBeforeConnect(UserBeforeConnectReq) returns (UserBeforeConnectResp);
  //UserBeforeRequest 用户请求前的回调
  //用户请求前的回调逻辑可以从这里修改
  rpc UserBeforeRequest(UserBeforeRequestReq) returns (UserBeforeRequestResp);
  //UserAfterKeepAlive 用户保活回调
  //用户保活回调逻辑可以从这里修改
  rpc UserAfterKeepAlive(UserAfterKeepAliveReq) returns (UserAfterKeepAliveResp);
}
