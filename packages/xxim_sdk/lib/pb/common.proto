syntax = "proto3";
package pb;
option go_package = "./pb";

//Platform 平台枚举
enum Platform {
  IOS = 0; // ios
  ANDROID = 1; // android
  WEB = 2; // web
  WINDOWS = 3; // windows
  MAC = 4; // mac
  LINUX = 5; // linux
  Ipad = 6; // ipad
  AndroidPad = 7; // android pad
}

//RequestHeader 请求头
message RequestHeader {
  string appId = 1; // 应用id
  string userId = 2; // 用户id
  string clientIp = 3; // 客户端ip
  string installId = 4; // 安装后向服务器注册的UUID
  Platform platform = 5; // 平台
  string deviceModel = 6; // 设备型号
  string osVersion = 7; // 操作系统版本
  string appVersion = 8; // app版本
  string extra = 9; // 额外信息
}

//ResponseCode
enum ResponseCode {
  SUCCESS = 0; // 成功
  INVALID_DATA = 1; // 无效的数据
  UNAUTHORIZED = 2; // 未授权
  FORBIDDEN = 3; // 禁止访问
  INVALID_METHOD = 4; // 无效的方法
  TIMEOUT = 5; // 超时
  SERVER_ERROR = 6; // 服务器错误
}

//ResponseActionType 客户端收到响应后做的动作类型
enum ResponseActionType {
  NONE_ACTION = 0; // 无动作
  TOAST_ACTION = 1; // toast提示
  ALERT_ACTION = 2; // alert提示
  SECOND_AUTH_ACTION = 3; // 二次认证 一段时间内没有进行二次验证 而且此次是高危操作 此时客户端应该弹出二次验证界面 验证短信验证码
}

//ToastActionData toast提示 客户端根据level显示不同的颜色 可能持续不同的时间
message ToastActionData {
  enum Level {
    INFO = 0; // 信息
    WARN = 1; // 警告
    ERROR = 2; // 错误
  }
  Level level = 1; // 级别
  string message = 2; // 消息
}

//AlertActionData alert提示 永远有一个关闭按钮 以下描述的是另一个操作按钮
message AlertActionData {
  enum ButtonType {
    NO_BUTTON = 0; // 无按钮
    JUMP_URL = 1; // 跳转url
  }
  string title = 1; // 标题
  string message = 2; // 消息
  ButtonType buttonType = 3; // 按钮类型
  string buttonLabel = 4; // 按钮标签
  string buttonData = 5; // 按钮数据
}

//ResponseHeader 响应头
message ResponseHeader {
  ResponseCode code = 1; // 错误码
  ResponseActionType actionType = 2; // 动作类型
  string actionData = 3; // 动作数据 json字符串
  string extra = 4; // 额外信息
}

//WebsocketCustomCloseCode websocket关闭码
//You can define custom codes in the 3000-4999 range.
//The 3000-3999 range is reserved for use by libraries, frameworks and applications.
//The 4000-4999 range is reserved for private use.
enum WebsocketCustomCloseCode {
  CloseCodeZero = 0; // pb必须有一个默认值
  CloseCodeNormalClose = 1000; // 正常关闭
  CloseCodeGoingAway = 1001; // 离开
  CloseCodeProtocolError = 1002; // 协议错误
  CloseCodeUnsupportedData = 1003; // 不支持的数据
  CloseCodeNoStatusReceived = 1005; // 没有收到状态
  CloseCodeAbnormalClosure = 1006; // 异常关闭

  CloseCodeAuthenticationFailed = 4001; // 认证失败
  CloseCodeDuplicateConnection = 4002; // 重复连接
  CloseCodeServerInternalError = 4003; // 服务器内部错误
  CloseCodeHeartbeatTimeout = 4004; // 心跳超时
}

//ConversationType 会话类型
enum ConversationType {
  // 单聊
  Single = 0;
  // 群聊
  Group = 1;
  // 订阅号
  Subscription = 2;
}

//NoticeContentType 通知内容类型
enum NoticeContentType {
  // 有新的好友请求
  NewFriendRequest = 0;
  // 加入到了新群
  JoinNewGroup = 1;
  // 在线状态
  OnlineStatus = 2;
}

//MessageContentType 消息内容类型
enum MessageContentType {
  // 图文
  Text = 0;
  // Markdown
  Markdown = 1;
  // 图片
  Image = 2;
  // 语音
  Voice = 3;
  // 视频
  Video = 4;

  // 正在输入
  Typing = 101;
  // 已读
  Read = 102;
  // 撤回
  Recall = 103;
}

//ConversationSettingKey 会话设置key
enum ConversationSettingKey {
  // 是否置顶
  IsPinned = 0;
  // 是否免打扰
  IsMuted = 1;
  // 是否屏蔽
  IsBlocked = 2;
  // 是否折叠
  IsFolded = 3;
  // 自己设置的会话备注
  ConversationAlias = 4;
  // 在会话中的昵称
  NicknameInConversation = 5;
}

//Message 消息
message Message {
  //MessageId 消息id 由服务端插入时生成
  string messageId = 1;
  //UUID 客户端生成的id 由客户端生成 在客户端保证唯一性
  string uuid = 2;

  //发送到哪个会话
  string conversationId = 3; // 单聊: 那么该值为接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 4;
  //发送者
  message Sender {
    //发送者id
    string id = 1;
    //发送者名称
    string name = 2;
    //发送者头像
    string avatar = 3;
    //extra
    string extra = 11;
  }
  Sender sender = 5; // 有可能是系统 那么该值为空

  //消息内容
  bytes content = 6;
  //消息类型
  MessageContentType contentType = 7;

  //发送时间 由客户端生成
  int64 sendTime = 8;
  //插入时间 由服务端生成
  int64 insertTime = 9;
  //在会话中的消息顺序
  int64 seq = 10;

  //选项
  message Option {
    //服务端是否保存该消息
    bool storageForServer = 1;
    //客户端是否保存该消息
    bool storageForClient = 2;
    //是否需要解密 （端对端加密技术，服务端无法解密）
    bool needDecrypt = 3;
    //消息是否需要计入未读数
    bool countUnread = 4;
  }
  Option option = 16;
  //extraMap, example: {"platformSource": "windows"}
  map<string, string> extraMap = 17;
}

//Notice 通知
message Notice {
  //通知id 因为通知永远都是服务端发送给客户端的，所以通知id一定唯一。
  string noticeId = 1;
  //发送到哪个会话
  string conversationId = 2; // 单聊: 那么该值为发送者和接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 3;
  //通知内容
  string content = 4;
  //通知类型
  NoticeContentType contentType = 5;
  //通知的更新时间
  int64 updateTime = 6;
  //排序
  int64 sort = 7;
}
