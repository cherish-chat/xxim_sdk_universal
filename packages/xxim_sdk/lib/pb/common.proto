syntax = "proto3";
package pb;
option go_package = "./pb";

//Platform 平台枚举
enum Platform {
  IOS = 0; // ios
  ANDROID = 1; // android
  WEB = 2; // web
  WINDOWS = 3; // windows
  MAC = 4; // mac
  LINUX = 5; // linux
  Ipad = 6; // ipad
  AndroidPad = 7; // android pad
}

//I18nLanguage 语言枚举
enum I18nLanguage {
  UNSET_LANGUAGE = 0; // 未设置
  Afrikaans = 1; // 南非荷兰语	af
  Albanian = 2; // 阿尔巴尼亚语	sq
  Amharic = 3; // 阿姆哈拉语	am
  Arabic = 4; // 阿拉伯语	ar
  Armenian = 5; // 亚美尼亚语	hy
  Azerbaijani = 6; // 阿塞拜疆语	az
  Bengali = 7; // 孟加拉语	bn
  Bosnian = 8; // 波斯尼亚语	bs
  Bulgarian = 9; // 保加利亚语	bg
  Catalan = 10; // 加泰罗尼亚语	ca
  Chinese_Simplified = 11; // 简体中文 	zh
  Chinese_Traditional = 12; // 繁体中文 	zh-TW
  Croatian = 13; // 克罗地亚语	hr
  Czech = 14; // 捷克语	cs
  Danish = 15; // 丹麦语	da
  Dari = 16; // 波斯语	fa-AF
  Dutch = 17; // 荷兰语	nl
  English = 18; // 英语	en
  Estonian = 19; // 爱沙尼亚语	et
  Farsi_Persian = 20; // 波斯语 	fa
  Filipino_Tagalog = 21; // 菲律宾语	tl
  Finnish = 22; // 芬兰语	fi
  French = 23; // 法语	fr
  French_Canada = 24; // 法语（加拿大）	fr-CA
  Georgian = 25; // 格鲁吉亚语	ka
  German = 26; // 德语	de
  Greek = 27; // 希腊语	el
  Gujarati = 28; // 古吉拉特语	gu
  Haitian_Creole = 29; // 海地克里奥尔语 	ht
  Hausa = 30; // 豪萨语	ha
  Hebrew = 31; // 希伯来语	he
  Hindi = 32; // 印地语	hi
  Hungarian = 33; // 匈牙利语	hu
  Icelandic = 34; // 冰岛语	is
  Indonesian = 35; // 印度尼西亚语	id
  Irish = 36; // 爱尔兰语	ga
  Italian = 37; // 意大利语	it
  Japanese = 38; // 日语	ja
  Kannada = 39; // 卡纳达语	kn
  Kazakh = 40; // 哈萨克语	kk
  Korean = 41; // 韩语	ko
  Latvian = 42; // 拉脱维亚语	lv
  Lithuanian = 43; // 立陶宛语	lt
  Macedonian = 44; // 马其顿语	mk
  Malay = 45; // 马来语	ms
  Malayalam = 46; // 马拉雅拉姆语	ml
  Maltese = 47; // 马耳他语	mt
  Marathi = 48; // 马拉地语	mr
  Mongolian = 49; // 蒙古语	mn
  Norwegian_Bokmal = 50; // 挪威语 	no
  Pashto = 51; // 普什图语	ps
  Polish = 52; // 波兰语	pl
  Portuguese_Brazil = 53; // 葡萄牙语（巴西）	pt
  Portuguese_Portugal = 54; // 葡萄牙语（葡萄牙）	pt-PT
  Punjabi = 55; // 旁遮普语	pa
  Romanian = 56; // 罗马尼亚语	ro
  Russian = 57; // 俄语	ru
  Serbian = 58; // 塞尔维亚语	sr
  Sinhala = 59; // 僧伽罗语	si
  Slovak = 60; // 斯洛伐克语	sk
  Slovenian = 61; // 斯洛文尼亚语	sl
  Somali = 62; // 索马里语	so
  Spanish = 63; // 西班牙语	es
  Spanish_Mexico = 64; // 西班牙语（墨西哥）	es-MX
  Swahili = 65; // 斯瓦希里语	sw
  Swedish = 66; // 瑞典语	sv
  Tamil = 67; // 泰米尔语	ta
  Telugu = 68; // 泰卢固语	te
  Thai = 69; // 泰语	th
  Turkish = 70; // 土耳其语	tr
  Ukrainian = 71; // 乌克兰语	uk
  Urdu = 72; // 乌尔都语	ur
  Uzbek = 73; // 乌兹别克语	uz
  Vietnamese = 74; // 越南语	vi
  Welsh = 75; // 威尔士语	cy
}

//EncodingProto 编码协议枚举
enum EncodingProto {
  PROTOBUF = 0; // protobuf
  JSON = 1; // json
}

//RequestHeader 请求头
message RequestHeader {
  string appId = 1; // 应用id
  string userId = 2; // 用户id
  string userToken = 3; // token
  string clientIp = 4; // 客户端ip
  string installId = 5; // 安装后向服务器注册的UUID
  Platform platform = 6; // 平台
  string gatewayPodIp = 7; // 网关pod的ip
  string deviceModel = 8; // 设备型号
  string osVersion = 9; // 操作系统版本
  string appVersion = 10; // app版本
  I18nLanguage language = 11; // 语言
  int64 connectTime = 12; // 连接时间 13位时间戳
  EncodingProto encoding = 13; // 编码
  string extra = 14; // 额外信息
}

//ResponseCode
enum ResponseCode {
  SUCCESS = 0; // 成功
  INVALID_DATA = 1; // 无效的数据
  UNAUTHORIZED = 2; // 未授权
  FORBIDDEN = 3; // 禁止访问
  INVALID_METHOD = 4; // 无效的方法
  TIMEOUT = 5; // 超时
  SERVER_ERROR = 6; // 服务器错误
}

//ResponseActionType 客户端收到响应后做的动作类型
enum ResponseActionType {
  NONE_ACTION = 0; // 无动作
  TOAST_ACTION = 1; // toast提示
  ALERT_ACTION = 2; // alert提示
  SECOND_AUTH_ACTION = 3; // 二次认证 一段时间内没有进行二次验证 而且此次是高危操作 此时客户端应该弹出二次验证界面 验证短信验证码
}

//ToastActionData toast提示 客户端根据level显示不同的颜色 可能持续不同的时间
message ToastActionData {
  enum Level {
    INFO = 0; // 信息
    WARN = 1; // 警告
    ERROR = 2; // 错误
  }
  Level level = 1; // 级别
  string message = 2; // 消息
}

//AlertActionData alert提示 永远有一个关闭按钮 以下描述的是另一个操作按钮
message AlertActionData {
  enum ButtonType {
    NO_BUTTON = 0; // 无按钮
    JUMP_URL = 1; // 跳转url
  }
  string title = 1; // 标题
  string message = 2; // 消息
  ButtonType buttonType = 3; // 按钮类型
  string buttonLabel = 4; // 按钮标签
  string buttonData = 5; // 按钮数据
}

//ResponseHeader 响应头
message ResponseHeader {
  ResponseCode code = 1; // 错误码
  ResponseActionType actionType = 2; // 动作类型
  string actionData = 3; // 动作数据 json字符串
  string extra = 4; // 额外信息
}

//WebsocketCustomCloseCode websocket关闭码
//You can define custom codes in the 3000-4999 range.
//The 3000-3999 range is reserved for use by libraries, frameworks and applications.
//The 4000-4999 range is reserved for private use.
enum WebsocketCustomCloseCode {
  CloseCodeZero = 0; // pb必须有一个默认值
  CloseCodeAuthenticationFailed = 4001; // 认证失败
  CloseCodeDuplicateConnection = 4002; // 重复连接
  CloseCodeServerInternalError = 4003; // 服务器内部错误
  CloseCodeHeartbeatTimeout = 4004; // 心跳超时
}

//ConversationType 会话类型
enum ConversationType {
  // 单聊
  Single = 0;
  // 群聊
  Group = 1;
  // 订阅号
  Subscription = 2;
}

//NoticeContentType 通知内容类型
enum NoticeContentType {
  // 有新的好友请求
  NewFriendRequest = 0;
  // 加入到了新群
  JoinNewGroup = 1;
  // 在线状态
  OnlineStatus = 2;
}

//MessageContentType 消息内容类型
enum MessageContentType {
  // 图文
  Text = 0;
  // Markdown
  Markdown = 1;
  // 图片
  Image = 2;
  // 语音
  Voice = 3;
  // 视频
  Video = 4;

  // 正在输入
  Typing = 101;
  // 已读
  Read = 102;
  // 撤回
  Recall = 103;
}

//ConversationSettingKey 会话设置key
enum ConversationSettingKey {
  // 是否置顶
  IsPinned = 0;
  // 是否免打扰
  IsMuted = 1;
  // 是否屏蔽
  IsBlocked = 2;
  // 是否折叠
  IsFolded = 3;
  // 自己设置的会话备注
  ConversationAlias = 4;
  // 在会话中的昵称
  NicknameInConversation = 5;
}

//Message 消息
message Message {
  //MessageId 消息id 由服务端插入时生成
  string messageId = 1;
  //UUID 客户端生成的id 由客户端生成 在客户端保证唯一性
  string uuid = 2;

  //发送到哪个会话
  string conversationId = 3; // 单聊: 那么该值为接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 4;
  //发送者
  message Sender {
    //发送者id
    string id = 1;
    //发送者名称
    string name = 2;
    //发送者头像
    string avatar = 3;
    //extra
    string extra = 11;
  }
  Sender sender = 5; // 有可能是系统 那么该值为空

  //消息内容
  bytes content = 6;
  //消息类型
  MessageContentType contentType = 7;

  //发送时间 由客户端生成
  int64 sendTime = 8;
  //插入时间 由服务端生成
  int64 insertTime = 9;
  //在会话中的消息顺序
  int64 seq = 10;

  //选项
  message Option {
    //服务端是否保存该消息
    bool storageForServer = 1;
    //客户端是否保存该消息
    bool storageForClient = 2;
    //是否需要解密 （端对端加密技术，服务端无法解密）
    bool needDecrypt = 3;
    //消息是否需要计入未读数
    bool countUnread = 4;
  }
  Option option = 16;
  //extraMap, example: {"platformSource": "windows"}
  map<string, string> extraMap = 17;
}

//Notice 通知
message Notice {
  //通知id 因为通知永远都是服务端发送给客户端的，所以通知id一定唯一。
  string noticeId = 1;
  //发送到哪个会话
  string conversationId = 2; // 单聊: 那么该值为发送者和接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 3;
  //通知内容
  string content = 4;
  //通知类型
  NoticeContentType contentType = 5;
  //通知的更新时间
  int64 updateTime = 6;
  //排序
  int64 sort = 7;
}
