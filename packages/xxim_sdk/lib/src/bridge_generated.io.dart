// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class XximSdkPlatform extends FlutterRustBridgeBase<XximSdkWire> {
  XximSdkPlatform(ffi.DynamicLibrary dylib) : super(XximSdkWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class XximSdkWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  XximSdkWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  XximSdkWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new_instance(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
  ) {
    return _wire_new_instance(
      port_,
      instance_id,
    );
  }

  late final _wire_new_instancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_new_instance');
  late final _wire_new_instance = _wire_new_instancePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_destroy_instance(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
  ) {
    return _wire_destroy_instance(
      port_,
      instance_id,
    );
  }

  late final _wire_destroy_instancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_destroy_instance');
  late final _wire_destroy_instance = _wire_destroy_instancePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_instance(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<ffi.Int32> net,
    ffi.Pointer<wire_uint_8_list> host,
    int port,
    bool ssl,
    ffi.Pointer<wire_uint_8_list> app_id,
    ffi.Pointer<wire_uint_8_list> install_id,
    int platform,
    ffi.Pointer<wire_uint_8_list> device_model,
    ffi.Pointer<wire_uint_8_list> os_version,
    int language,
    int request_timeout_millisecond,
    ffi.Pointer<wire_uint_8_list> db_dir,
    ffi.Pointer<wire_uint_8_list> custom_header,
    int keep_alive_second,
    int log_level,
  ) {
    return _wire_init_instance(
      port_,
      instance_id,
      net,
      host,
      port,
      ssl,
      app_id,
      install_id,
      platform,
      device_model,
      os_version,
      language,
      request_timeout_millisecond,
      db_dir,
      custom_header,
      keep_alive_second,
      log_level,
    );
  }

  late final _wire_init_instancePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Int32>, ffi.Pointer<wire_uint_8_list>, ffi.Uint16, ffi.Bool, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Int32, ffi.Int32)>>('wire_init_instance');
  late final _wire_init_instance = _wire_init_instancePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Int32>, ffi.Pointer<wire_uint_8_list>, int, bool, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_preset_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
  ) {
    return _wire_preset_stream(
      port_,
      instance_id,
    );
  }

  late final _wire_preset_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_preset_stream');
  late final _wire_preset_stream = _wire_preset_streamPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_wait_stream_ready(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
  ) {
    return _wire_wait_stream_ready(
      port_,
      instance_id,
    );
  }

  late final _wire_wait_stream_readyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_wait_stream_ready');
  late final _wire_wait_stream_ready = _wire_wait_stream_readyPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_login_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> token,
    ffi.Pointer<wire_uint_8_list> user_id,
  ) {
    return _wire_set_login_info(
      port_,
      instance_id,
      token,
      user_id,
    );
  }

  late final _wire_set_login_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_set_login_info');
  late final _wire_set_login_info = _wire_set_login_infoPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unset_login_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
  ) {
    return _wire_unset_login_info(
      port_,
      instance_id,
    );
  }

  late final _wire_unset_login_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_unset_login_info');
  late final _wire_unset_login_info = _wire_unset_login_infoPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_user_register(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_user_registerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_user_register');
  late final _wire_user_register = _wire_user_registerPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_user_access_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_user_access_token(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_user_access_tokenPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_user_access_token');
  late final _wire_user_access_token = _wire_user_access_tokenPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_robot(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_create_robot(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_create_robotPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_create_robot');
  late final _wire_create_robot = _wire_create_robotPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_refresh_user_access_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_refresh_user_access_token(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_refresh_user_access_tokenPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_refresh_user_access_token');
  late final _wire_refresh_user_access_token = _wire_refresh_user_access_tokenPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_revoke_user_access_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_revoke_user_access_token(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_revoke_user_access_tokenPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_revoke_user_access_token');
  late final _wire_revoke_user_access_token = _wire_revoke_user_access_tokenPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_friend_apply(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_friend_apply(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_friend_applyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_friend_apply');
  late final _wire_friend_apply = _wire_friend_applyPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_friend_apply(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_list_friend_apply(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_list_friend_applyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_list_friend_apply');
  late final _wire_list_friend_apply = _wire_list_friend_applyPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_friend_apply_handle(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_friend_apply_handle(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_friend_apply_handlePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_friend_apply_handle');
  late final _wire_friend_apply_handle = _wire_friend_apply_handlePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_group_create(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_group_create(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_group_createPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_group_create');
  late final _wire_group_create = _wire_group_createPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_message_send(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_message_send(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_message_sendPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_message_send');
  late final _wire_message_send = _wire_message_sendPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_message_batch_send(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_message_batch_send(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_message_batch_sendPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_message_batch_send');
  late final _wire_message_batch_send = _wire_message_batch_sendPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_notice(
    int port_,
    ffi.Pointer<wire_uint_8_list> instance_id,
    ffi.Pointer<wire_uint_8_list> protobuf,
  ) {
    return _wire_list_notice(
      port_,
      instance_id,
      protobuf,
    );
  }

  late final _wire_list_noticePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_list_notice');
  late final _wire_list_notice = _wire_list_noticePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
